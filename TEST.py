import logging
import os
import re
from io import BytesIO
from datetime import datetime
from unidecode import unidecode
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InputFile
from telegram.ext import (
    Application, CommandHandler, CallbackQueryHandler,
    MessageHandler, ConversationHandler, filters, ContextTypes
)

from openpyxl import load_workbook
from openpyxl.drawing.image import Image
from openpyxl.styles import Alignment
from googletrans import Translator
import math




# =================== –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö ===================
load_dotenv()
TOKEN = os.getenv("TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID"))

# =================== –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ===================
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)

# =================== –°–æ—Å—Ç–æ—è–Ω–∏—è ===================
SERIAL, ALLOCATION, TEAM_NUMBER, USER, DESCRIPTION = range(5)
translator = Translator()



# =================== –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ===================
def get_workbook(report_type="LDR"):
    current_dir = os.path.dirname(__file__)
    if report_type.upper() == "MFR":
        filename = "MFR.xlsx"
    else:
        filename = "LDR.xlsx"
    return load_workbook(os.path.join(current_dir, "excel", filename))


def get_logo_bytes():
    current_dir = os.path.dirname(__file__)
    with open(os.path.join(current_dir, "logo", "Drive the NPA way.png"), "rb") as f:
        return BytesIO(f.read())

async def translate_to_en(text: str) -> str:
    result = await translator.translate(text, dest='en')
    return result.text

# def set_cell(ws, cell, value):
#     ws[cell] = value
#     ws[cell].alignment = Alignment(horizontal="center", vertical="center")

# def auto_adjust(ws, cells):
#     for cell in cells:
#         value = ws[cell].value
#         if value:
#             col_letter = ''.join(filter(str.isalpha, cell))
#             ws.column_dimensions[col_letter].width = max(
#                 ws.column_dimensions[col_letter].width or 10,
#                 len(str(value)) + 2
#             )
#             ws.row_dimensions[ws[cell].row].height = max(
#                 ws.row_dimensions[ws[cell].row].height or 15,
#                 15
#             )


def set_cell(ws, cell, value):
    try:
        ws[cell].value = value
    except AttributeError:
        # –µ—Å–ª–∏ –ø–æ–ø–∞–ª–∏ –≤ –æ–±—ä–µ–¥–∏–Ω—ë–Ω–Ω—É—é —è—á–µ–π–∫—É, –∏—â–µ–º –≤–µ—Ä—Ö–Ω—é—é –ª–µ–≤—É—é
        for merged_range in ws.merged_cells.ranges:
            if cell in merged_range:
                top_left = merged_range.min_row, merged_range.min_col
                ws.cell(row=top_left[0], column=top_left[1], value=value)
                break
def auto_adjust(ws, cells):
    for cell in cells:
        value = ws[cell].value
        if value:
            col_letter = ''.join(filter(str.isalpha, cell))
            ws.column_dimensions[col_letter].width = max(
                ws.column_dimensions[col_letter].width or 10,
                len(str(value)) + 2
            )
            ws.row_dimensions[ws[cell].row].height = max(
                ws.row_dimensions[ws[cell].row].height or 15,
                15
            )



# =================== –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ===================
async def main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("LDR (Lost / Damage) | –í—Ç—Ä–∞—á–µ–Ω–æ –∞–±–æ –ø–æ—à–∫–æ–¥–∂–µ–Ω–æ", callback_data="ldr")],
        [InlineKeyboardButton("MFR (Mechanical failure) | –ú–µ—Ö–∞–Ω—ñ—á–Ω–µ –ø–æ—à–∫–æ–¥–∂–µ–Ω–Ω—è –∞–≤—Ç–æ", callback_data="mfr")],
        [InlineKeyboardButton("Contacts | –ö–æ–Ω—Ç–∞–∫—Ç–∏", callback_data="contacts")],
        #[InlineKeyboardButton("Other questions | –Ü–Ω—à—ñ –ø–∏—Ç–∞–Ω–Ω—è", callback_data="other_questions")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    text = ("üá¨üáß EN\n"
            "Hello! This is the NPA Fleet bot üöó\n"
            "I can help you create reports for vehicles.\n\n"
            "üá∫üá¶ UA\n"
            "–ü—Ä–∏–≤—ñ—Ç! –¶–µ –±–æ—Ç NPA Fleet üöó\n"
            "–Ø –¥–æ–ø–æ–º–æ–∂—É –≤–∞–º —Å—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ –∑–≤—ñ—Ç–∏ –ø–æ –∞–≤—Ç–æ–º–æ–±—ñ–ª—è—Ö.\n\n"
            "What are you interested in today? / –©–æ –≤–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—å —Å—å–æ–≥–æ–¥–Ω—ñ?"
            )
    if update.callback_query:
        await update.callback_query.answer()
        try: await update.callback_query.message.delete()
        except: pass
        await update.callback_query.message.reply_text(text=text, reply_markup=reply_markup)
    else:
        await update.message.reply_text(text=text, reply_markup=reply_markup)





# –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å –¥–æ—Å—Ç—É–ø ‚Äî —Å—Ç–∞–≤–∏—à—å True
RESTRICTED_MODE = False






# =================== –°—Ç–∞—Ä—Ç ===================

ALLOWED_USERS = {
    5077758580: "Oleksandr Rudnov",
    6093640376: "Roman Kucherevskyi",
    787549014: "Anastasia Vesloguzova",
    513781701: "Dmytro Safonenko",
    528557238: "Vladyslav Prikhodko",
    702797267: "Maksym Shevchenko",
}


def restricted(func):
    async def wrapper(update: Update, context: ContextTypes.DEFAULT_TYPE, *args, **kwargs):
        user_id = update.effective_user.id
        if user_id not in ALLOWED_USERS:
            if update.message:
                await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–∏–π")
            elif update.callback_query:
                await update.callback_query.answer()
                await update.callback_query.message.reply_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–∏–π")
            return
        return await func(update, context, *args, **kwargs)
    return wrapper

#@restricted
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id

    if RESTRICTED_MODE:
        if user_id not in ALLOWED_USERS:
            if update.message:
                await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–∏–π")
            elif update.callback_query:
                await update.callback_query.answer()
                await update.callback_query.message.reply_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–∏–π")
            return  # –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
        


#@restricted
# async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
#     user_id = update.effective_user.id
#     if user_id not in ALLOWED_USERS:
#         if update.message:
#             await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–∏–π")
#         elif update.callback_query:
#             await update.callback_query.answer()
#             await update.callback_query.message.reply_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–∏–π")
#         return  # –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –¥–∞–ª—å—à–µ –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º

    # –æ—á–∏—â–∞–µ–º user_data
    context.user_data.clear()

    # –≥–æ—Ç–æ–≤–∏–º —Ñ–æ—Ç–æ
    logo_bytes = get_logo_bytes()
    logo_file = InputFile(logo_bytes, filename="logo.png")
    keyboard = [[InlineKeyboardButton("Start | –ü–æ—á–∞—Ç–∏", callback_data="main_menu")]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ
    if update.message:
        await update.message.reply_photo(photo=logo_file, caption="Welcome to NPA Fleet bot üöó", reply_markup=reply_markup)
    elif update.callback_query:
        await update.callback_query.answer()
        await update.callback_query.message.reply_photo(photo=logo_file, caption="Welcome to NPA Fleet bot üöó", reply_markup=reply_markup)

#@restricted
async def start_button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await main_menu(update, context)

# =================== Cancel ===================
#@restricted
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.clear()
    if update.callback_query:
        await update.callback_query.answer()
        try: await update.callback_query.message.delete()
        except: pass
    await main_menu(update, context)
    return ConversationHandler.END


MANAGERS = {
    "Shyroke": [ADMIN_ID],
    "Mykolaiv": [6093640376],
}













# ================================================================== LDR ========================================================================================================
SERIAL = 1
ALLOCATION = 2
TEAM_NUMBER = 3
USER = 4
DESCRIPTION = 5
OTHER_REQUEST_INPUT = 6

#@restricted
async def ldr_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    keyboard = [
        [InlineKeyboardButton("Flat tire | –ü–æ—à–∫–æ–¥–∂–µ–Ω–µ –∫–æ–ª–µ—Å–æ", callback_data="flat_tire")],
        #[InlineKeyboardButton("Wipers replacement | –ó–∞–º—ñ–Ω–∞ –¥–≤–æ—Ä–Ω–∏–∫—ñ–≤", callback_data="wipers")],
        #[InlineKeyboardButton("Driver's card | –í–æ–¥—ñ–π—Å—å–∫–∞ –∫–∞—Ä—Ç–∞", callback_data="Drivers_card")],
        [InlineKeyboardButton("Other damage | –Ü–Ω—à–µ –ø–æ—à–∫–æ–¥–∂–µ–Ω–Ω—è", callback_data="other_request")],
        [InlineKeyboardButton("‚ùå Cancel | –í—ñ–¥–º—ñ–Ω–∏—Ç–∏", callback_data="cancel")]
    ]
    try: await query.message.delete()
    except: pass
    await query.message.reply_text("Choose request type | –í–∏–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è:", reply_markup=InlineKeyboardMarkup(keyboard))


#@restricted
from telegram import InlineKeyboardButton, InlineKeyboardMarkup

async def ldr_request_type_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data

    if data == "cancel":
        return await cancel(update, context)

    context.user_data['wb'] = get_workbook("LDR")
    context.user_data['ws'] = context.user_data['wb'].active
    ws = context.user_data['ws']

    if data == "other_request":
        try:
            await query.message.delete()
        except:
            pass

        # —Å–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫—É Cancel
        cancel_button = InlineKeyboardMarkup([
            [InlineKeyboardButton("Cancel ‚ùå", callback_data="cancel")]
        ])

        await query.message.reply_text(
            "Please indicate what is damaged: \n–í–∫–∞–∂—ñ—Ç—å, —â–æ –ø–æ—à–∫–æ–¥–∂–µ–Ω–æ:",
            reply_markup=cancel_button
        )
        
        return OTHER_REQUEST_INPUT  # <-- –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç—É, –∞ –Ω–µ —Å—Ç—Ä–æ–∫—É


    # –°—Ç–∞—Ä—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∫–Ω–æ–ø–æ–∫ —Å –≥–æ—Ç–æ–≤—ã–º–∏ —Ñ—Ä–∞–∑–∞–º–∏
    if data == "flat_tire":
        set_cell(ws, "C7", "Flat tyre")
    elif data == "wipers":
        set_cell(ws, "C7", "Wipers replacement")
    elif data == "Drivers_card":
        set_cell(ws, "C7", "Driver's card")    

    set_cell(ws, "F7", "Serial / ID / –°–µ—Ä—ñ–π–Ω–∏–π –Ω–æ–º–µ—Ä / ID")

    keyboard = [
        [InlineKeyboardButton("Shyroke", callback_data="Shyroke")],
        [InlineKeyboardButton("Mykolaiv", callback_data="Mykolaiv")],
        [InlineKeyboardButton("‚ùå Cancel / –í—ñ–¥–º—ñ–Ω–∏—Ç–∏", callback_data="cancel")]
    ]
    try: await query.message.delete()
    except: pass
    await query.message.reply_text(
        "Select vehicle location | –û–±–µ—Ä—ñ—Ç—å –ª–æ–∫–∞—Ü—ñ—é –∞–≤—Ç–æ–º–æ–±—ñ–ª—è:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return ALLOCATION



# –ù–æ–≤—ã–π —Ö—ç–Ω–¥–ª–µ—Ä –¥–ª—è –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
from googletrans import Translator

translator = Translator()

async def translate_to_en(text: str) -> str:
    # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –≤—ã–∑—ã–≤–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥
    translated = await translator.translate(text, dest='en')
    return translated.text

#@restricted
async def ldr_other_request_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_text = update.message.text.strip()
    if not user_text:
        await update.message.reply_text("‚ùå Please type your request / ‚ùå –í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è")
        return OTHER_REQUEST_INPUT

    ws = context.user_data['ws']

    # –ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
    translated_text = await translate_to_en(user_text)

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥ –≤ Excel
    set_cell(ws, "C7", translated_text)
    set_cell(ws, "F7", "Serial / ID / –°–µ—Ä—ñ–π–Ω–∏–π –Ω–æ–º–µ—Ä / ID")

    keyboard = [
        [InlineKeyboardButton("Shyroke", callback_data="Shyroke")],
        [InlineKeyboardButton("Mykolaiv", callback_data="Mykolaiv")],
        [InlineKeyboardButton("‚ùå Cancel / –í—ñ–¥–º—ñ–Ω–∏—Ç–∏", callback_data="cancel")]
    ]
    await update.message.reply_text(
        "Select vehicle location | –û–±–µ—Ä—ñ—Ç—å –ª–æ–∫–∞—Ü—ñ—é –∞–≤—Ç–æ–º–æ–±—ñ–ª—è:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return ALLOCATION

# =================== –í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö ===================











async def serial_input_ldr(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip().upper()  # –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ –≤–µ—Ä—Ö–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä
    text = text.replace(" ", "")  # —É–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª –±–µ–∑ –¥–µ—Ñ–∏—Å–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä AA12, –¥–æ–±–∞–≤–∏–º –¥–µ—Ñ–∏—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
    if re.fullmatch(r"[A-Z]{2}\d{2}", text):
        text = text[:2] + "-" + text[2:]

    # –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞: –¥–≤–µ –±—É–∫–≤—ã - –¥–µ—Ñ–∏—Å - –¥–≤–µ —Ü–∏—Ñ—Ä—ã
    if not re.fullmatch(r"[A-Z]{2}-\d{2}", text):
        await update.message.reply_text(
            "‚ùå –ù–µ–≤—ñ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ –∞–≤—Ç–æ. –§–æ—Ä–º–∞—Ç –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏:(–Ω–∞–ø—Ä. HP-12)\nTry again / –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:"
        )
        return SERIAL

    ws = context.user_data['ws']
    set_cell(ws, "F7", text)

    # –ü–µ—Ä–≤—ã–π —É—Ä–æ–≤–µ–Ω—å Allocation
    keyboard = [
        [InlineKeyboardButton(x, callback_data=x)] for x in ["MTT","MDD","MECH","NTS","OPS/SUPP"]
    ]
    keyboard.append([InlineKeyboardButton("‚ùå Cancel | –í—ñ–¥–º—ñ–Ω–∏—Ç–∏", callback_data="cancel")])

    await update.message.reply_text(
        "Choose Allocation | –û–±–µ—Ä—ñ—Ç—å –†–æ–∑–ø–æ–¥—ñ–ª:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return ALLOCATION


async def allocation_input_ldr(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    selection = query.data

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ workbook
    if 'ws' not in context.user_data:
        await query.message.reply_text(
            "‚ùå Please start the request from the beginning using /start\n‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –ø–æ—á–Ω—ñ—Ç—å –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è –∑–∞–Ω–æ–≤–æ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é /start"
        )
        return ConversationHandler.END

    ws = context.user_data['ws']

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã
    if selection == "cancel":
        return await cancel(update, context)

    # –õ–æ–∫–∞—Ü–∏–∏ Shyroke / Mykolaiv
    if selection in ["Shyroke", "Mykolaiv"]:
        context.user_data['location'] = selection
        set_cell(ws, "C10", selection)
        try: await query.message.delete()
        except: pass
        await query.message.reply_text(
            "Enter vehicle call sign (e.g. HP-12): \n–í–≤–µ–¥—ñ—Ç—å –≤–Ω—É—Ç—Ä—ñ—à–Ω—ñ–π –Ω–æ–º–µ—Ä –∞–≤—Ç–æ (–Ω–∞–ø—Ä. HP-12):",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚ùå Cancel | –í—ñ–¥–º—ñ–Ω–∏—Ç–∏", callback_data="cancel")]])
        )
        return SERIAL

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª OPS/SUPP ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Ç–æ—Ä–æ–π —É—Ä–æ–≤–µ–Ω—å –∫–Ω–æ–ø–æ–∫
    if selection == "OPS/SUPP":
        keyboard = [[InlineKeyboardButton(x, callback_data=f"OPS/{x}")] for x in ["STFM","TFM","SUPV","LOGS","IMM","QA"]]
        keyboard.append([InlineKeyboardButton("‚ùå Cancel | –í—ñ–¥–º—ñ–Ω–∏—Ç–∏", callback_data="cancel")])
        try: await query.message.delete()
        except: pass
        await query.message.reply_text(
            "Choose sub-allocation for OPS/SUPP | –û–±–µ—Ä—ñ—Ç—å –ø—ñ–¥—Ä–æ–∑–ø–æ–¥—ñ–ª –¥–ª—è OPS/SUPP:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return ALLOCATION  # –æ—Å—Ç–∞—ë–º—Å—è –Ω–∞ —ç—Ç–æ–º –∂–µ —à–∞–≥–µ, –∂–¥—ë–º –≤—Ç–æ—Ä–æ–π –≤—ã–±–æ—Ä

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–¥–∫–Ω–æ–ø–∫–∏ OPS/SUPP
    if selection.startswith("OPS/"):
        allocation_choice = selection.split("/")[1]
        set_cell(ws, "F10", f"{allocation_choice}")
        try: await query.message.delete()
        except: pass
        await query.message.reply_text(
            "Enter your full name | –í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ –Ü–º'—è —Ç–∞ –ø—Ä—ñ–∑–≤–∏—â–µ:",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚ùå Cancel | –í—ñ–¥–º—ñ–Ω–∏—Ç–∏", callback_data="cancel")]])
        )
        return USER

    # –ï—Å–ª–∏ MTT, MDD, NTS ‚Äî —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–º–µ—Ä –∫–æ–º–∞–Ω–¥—ã
    if selection.upper() in ["MTT", "MDD", "NTS"]:
        context.user_data['allocation'] = selection.upper()
        try: await query.message.delete()
        except: pass
        await query.message.reply_text(
            f"Enter team number for {selection.upper()} | –í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –∫–æ–º–∞–Ω–¥–∏ –¥–ª—è {selection.upper()}:",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚ùå Cancel | –í—ñ–¥–º—ñ–Ω–∏—Ç–∏", callback_data="cancel")]])
        )
        return TEAM_NUMBER

    # –ï—Å–ª–∏ MECH ‚Äî –ø—Ä–æ—Å—Ç–æ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ Excel –∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–º—è
    if selection.upper() == "MECH":
        set_cell(ws, "D6", "MECH")
        try: await query.message.delete()
        except: pass
        await query.message.reply_text(
            "Enter your full name | –í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ –Ü–º'—è —Ç–∞ –ø—Ä—ñ–∑–≤–∏—â–µ:",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚ùå Cancel | –í—ñ–¥–º—ñ–Ω–∏—Ç–∏", callback_data="cancel")]])
        )
        return USER


async def team_number_input_ldr(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    if not text.isdigit():
        await update.message.reply_text("‚ùå Team number must be a number")
        return TEAM_NUMBER
    ws = context.user_data['ws']
    allocation = context.user_data.get('allocation')
    set_cell(ws, "F10", f"{allocation}-{text}")
    await update.message.reply_text(
        "Enter your full name | –í–≤–µ–¥—ñ—Ç—å –Ü–º'—è —Ç–∞ –ø—Ä—ñ–∑–≤–∏—â–µ:",
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("Cancel / –í—ñ–¥–º—ñ–Ω–∏—Ç–∏", callback_data="cancel")]])
    )
    return USER


async def user_input_ldr(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    if not text:
        await update.message.reply_text("‚ùå You did not enter your name")
        return USER
    user_name_latin = unidecode(text)
    ws = context.user_data['ws']
    set_cell(ws, "I7", user_name_latin)
    set_cell(ws, "B21", user_name_latin)
    location = context.user_data.get('location')
    manager_fa = {"Shyroke":"F.A. Oleksandr Rudnov","Mykolaiv":"F.A. Andriy Padalka"}.get(location,"F.A. Unknown")
    set_cell(ws, "F21", manager_fa)
    set_cell(ws, "C21", datetime.now().strftime("%Y-%m-%d"))
    await update.message.reply_text(
        "Briefly describe the situation | –ö–æ—Ä–æ—Ç–∫–æ –æ–ø–∏—à—ñ—Ç—å —Å–∏—Ç—É–∞—Ü—ñ—é:",
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("Cancel / –í—ñ–¥–º—ñ–Ω–∏—Ç–∏", callback_data="cancel")]])
    )
    return DESCRIPTION



# =================== –û–ø–∏—Å–∞–Ω–∏–µ ===================




def auto_height_for_cell(ws, cell_address):
    cell = ws[cell_address]
    cell.alignment = Alignment(horizontal="left", vertical="top", wrap_text=True)

    # –ü–æ–ª—É—á–∞–µ–º —à–∏—Ä–∏–Ω—É –∫–æ–ª–æ–Ω–∫–∏ –≤ —Å–∏–º–≤–æ–ª–∞—Ö (–ø—Ä–∏–±–ª–∏–∂—ë–Ω–Ω–æ)
    col_letter = ''.join(filter(str.isalpha, cell_address))
    col_width = ws.column_dimensions[col_letter].width or 10  # –µ—Å–ª–∏ –Ω–µ –∑–∞–¥–∞–Ω–æ, —Å—Ç–∞–≤–∏–º 10

    # –û—Ü–µ–Ω–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Ç—Ä–æ–∫: –¥–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞ / —à–∏—Ä–∏–Ω–∞ –∫–æ–ª–æ–Ω–∫–∏
    text_length = len(str(cell.value))
    lines_needed = math.ceil(text_length / col_width)

    # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –≤—ã—Å–æ—Ç–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ ~15
    ws.row_dimensions[cell.row].height = lines_needed * 15

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Ç–≤–æ–µ–π —Ñ—É–Ω–∫—Ü–∏–∏:



async def description_input_ldr(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    if not text:
        await update.message.reply_text("‚ùå Describe the situation / ‚ùå –û–ø–∏—à—ñ—Ç—å —Å–∏—Ç—É–∞—Ü—ñ—é")
        return DESCRIPTION

    text_en = await translate_to_en(text)
    ws = context.user_data['ws']









    # # –í—Å—Ç–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ –≤ A9 —Å –ø–µ—Ä–µ–Ω–æ—Å–æ–º –∏ –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ–º –ø–æ –ª–µ–≤–æ–º—É –∫—Ä–∞—é
    # cell = ws["A9"]
    # cell.value = text_en
    # from openpyxl.styles import Alignment
    # cell.alignment = Alignment(horizontal="left", vertical="top", wrap_text=True)

    # # –ê–≤—Ç–æ-–≤—ã—Å–æ—Ç–∞ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è A9 —Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –≤—ã—Å–æ—Ç–æ–π
    # auto_height_for_cell(ws, "A9", min_height=200)



def split_text(text, words_per_line=12):
    """–†–∞–∑–±–∏–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –Ω–∞ —Å—Ç—Ä–æ–∫–∏ –ø—Ä–∏–º–µ—Ä–Ω–æ –ø–æ 20 —Å–ª–æ–≤"""
    words = text.split()
    return [" ".join(words[i:i+words_per_line]) for i in range(0, len(words), words_per_line)]

async def description_input_ldr(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    if not text:
        await update.message.reply_text("‚ùå Describe the situation / ‚ùå –û–ø–∏—à—ñ—Ç—å —Å–∏—Ç—É–∞—Ü—ñ—é")
        return DESCRIPTION

    text_en = await translate_to_en(text)
    ws = context.user_data['ws']

    # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ –∫—É—Å–∫–∏
    lines = split_text(text_en, words_per_line=25)

    # –≤—Å—Ç–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ –ø–æ —Å—Ç—Ä–æ–∫–∞–º
    start_row = 16  # —Ç–µ–ø–µ—Ä—å B16
    for i, line in enumerate(lines, start=start_row):
        if i > 20:
            break
        cell = ws[f"B{i}"]
        cell.value = line
        cell.alignment = Alignment(horizontal="left", vertical="top")


    # –ü–æ–¥–≥–æ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä—ã –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —è—á–µ–µ–∫
    auto_adjust(ws, ["C7","F7","C10","F10","I7","B21","C21","F21"])


    

    # –õ–æ–≥–æ—Ç–∏–ø
    # logo_path = os.path.join(os.path.dirname(__file__), "logo", "–õ–æ–≥–æ –µ–∫—Å–µ–ª—å.png")
    # img = Image(logo_path)
    # img.width, img.height = 1069, 194
    # ws.add_image(img, "A1")

    plate = ws["F7"].value or "CAR"
    filename = f"LDR_{plate}_{datetime.now().strftime('%Y-%m-%d_%H-%M')}.xlsx"

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º –ø–æ –ª–æ–∫–∞—Ü–∏–∏


    # –û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º –ø–æ –ª–æ–∫–∞—Ü–∏–∏
    location = context.user_data.get("location")
    manager_ids = MANAGERS.get(location, [])
    user_id = update.effective_user.id
    user_name = ALLOWED_USERS.get(user_id, "Unknown")  # –ø–æ–ª—É—á–∞–µ–º –∏–º—è –∏–∑ —Å–ª–æ–≤–∞—Ä—è

    for manager_id in manager_ids:
        file_stream = BytesIO()
        ws.parent.save(file_stream)
        file_stream.seek(0)
        await context.bot.send_document(chat_id=manager_id, document=file_stream, filename=filename)
        await context.bot.send_message(
            chat_id=manager_id,
            text=f"üìÑ –ù–æ–≤–∏–π LDR –∑–≤—ñ—Ç –ø–æ –ª–æ–∫–∞—Ü—ñ—ó {location} –≤—ñ–¥ {user_name}"
        )

    context.user_data.clear()

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await update.message.reply_text("‚úÖ Your report has been sent! / ‚úÖ –ó–≤—ñ—Ç –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ!")

    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Ñ–æ—Ç–æ —Å –∫–Ω–æ–ø–∫–æ–π
    logo_bytes_start = get_logo_bytes()
    logo_file = InputFile(logo_bytes_start, filename="logo.png")
    keyboard = [[InlineKeyboardButton("Start | –ü–æ—á–∞—Ç–∏", callback_data="main_menu")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_photo(photo=logo_file, caption="Welcome to NPA Fleet bot üöó", reply_markup=reply_markup)

    return ConversationHandler.END

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ-–ø–æ–¥–≥–æ–Ω–∫–∏ –≤—ã—Å–æ—Ç—ã —Å—Ç—Ä–æ–∫–∏ A9 —Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –∑–∞—â–∏—Ç–æ–π
def auto_height_for_cell(ws, cell_address, min_height=45):
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≤—ã—Å–æ—Ç–∞ —Å—Ç—Ä–æ–∫–∏ –ø–æ–¥ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ, –Ω–æ –Ω–µ –º–µ–Ω—å—à–µ min_height"""
    cell = ws[cell_address]
    row = cell.row
    lines = str(cell.value).count('\n') + 1
    # –†–∞—Å—á–µ—Ç –≤—ã—Å–æ—Ç—ã: 15 –ø–∏–∫—Å–µ–ª–µ–π –Ω–∞ —Å—Ç—Ä–æ–∫—É
    height = max(lines * 15, min_height)
    ws.row_dimensions[row].height = height






# =================== –ó–∞–≥–ª—É—à–∫–∏ ===================
async def generic_stub(update: Update, context: ContextTypes.DEFAULT_TYPE, name="Function"):
    query = update.callback_query
    await query.answer()
    keyboard = [[InlineKeyboardButton("‚ùå Cancel | –í—ñ–¥–º—ñ–Ω–∏—Ç–∏", callback_data="cancel")]]
    try: await query.message.delete()
    except: pass
    await query.message.reply_text(f"You selected {name}. Function in progress.", reply_markup=InlineKeyboardMarkup(keyboard))


#=====================================================LDR END=============================================================================














#=====================================================MFR=================================================================================

ALLOCATION, MODEL_SELECTION, SERIAL, TEAM_NUMBER, USER, DESCRIPTION = range(6)

# –ù–∞—á–∞–ª–æ MFR –∑–∞–ø—Ä–æ—Å–∞ ‚Äî —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –ª–æ–∫–∞—Ü–∏—é
#@restricted
async def mfr_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    # –°–æ–∑–¥–∞–µ–º workbook –¥–ª—è MFR
    context.user_data['wb'] = get_workbook("MFR")
    context.user_data['ws'] = context.user_data['wb'].active
    ws = context.user_data['ws']

    # –¢–∏–ø –∑–∞–ø—Ä–æ—Å–∞ –≤ Excel
    set_cell(ws, "F6", "Serial / ID / –°–µ—Ä—ñ–π–Ω–∏–π –Ω–æ–º–µ—Ä / ID")

    # ------------------- –ö–Ω–æ–ø–∫–∏ –ª–æ–∫–∞—Ü–∏–∏ -------------------
    keyboard = [
        [InlineKeyboardButton("Shyroke", callback_data="Shyroke")],
        [InlineKeyboardButton("Mykolaiv", callback_data="Mykolaiv")],
        [InlineKeyboardButton("‚ùå Cancel | –í—ñ–¥–º—ñ–Ω–∏—Ç–∏", callback_data="cancel")]
    ]
    # -------------------------------------------------------

    try: 
        await query.message.delete()
    except: 
        pass

    await query.message.reply_text(
        "Select vehicle location | –û–±–µ—Ä—ñ—Ç—å –ª–æ–∫–∞—Ü—ñ—é –∞–≤—Ç–æ–º–æ–±—ñ–ª—è:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return ALLOCATION




# –í—ã–±–æ—Ä –ª–æ–∫–∞—Ü–∏–∏
# ---------- –ü–µ—Ä–≤—ã–π —É—Ä–æ–≤–µ–Ω—å: –±—Ä–µ–Ω–¥—ã ----------
async def mfr_location_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    location = query.data

    if location == "cancel":
        return await cancel(update, context)

    ws = context.user_data['ws']
    set_cell(ws, "C9", location)
    context.user_data['location'] = location

    try:
        await query.message.delete()
    except:
        pass

    # –±—Ä–µ–Ω–¥—ã
    keyboard = [
        [InlineKeyboardButton("TOYOTA", callback_data="brand_TOYOTA")],
        [InlineKeyboardButton("FORD", callback_data="brand_FORD")],
        [InlineKeyboardButton("MITSUBISHI", callback_data="brand_MITSUBISHI")],
        [InlineKeyboardButton("VOLKSWAGEN", callback_data="brand_VOLKSWAGEN")],
        [InlineKeyboardButton("RENAULT DUSTER", callback_data="RENAULT DUSTER")],
        [InlineKeyboardButton("SKODA KODIAQ", callback_data="SKODA KODIAQ")],
        [InlineKeyboardButton("‚ùå Cancel / –í—ñ–¥–º—ñ–Ω–∏—Ç–∏", callback_data="cancel")]
    ]

    await query.message.reply_text(
        "Select car brand | –û–±–µ—Ä—ñ—Ç—å –º–∞—Ä–∫—É –∞–≤—Ç–æ:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return MODEL_SELECTION




# –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ –∞–≤—Ç–æ
# ---------- –í—Ç–æ—Ä–æ–π —É—Ä–æ–≤–µ–Ω—å: –º–æ–¥–µ–ª–∏ ----------
async def model_input_mfr(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    choice = query.data

    ws = context.user_data['ws']

    # –û—Ç–º–µ–Ω–∞
    if choice == "cancel":
        return await cancel(update, context)

    # –ï—Å–ª–∏ –Ω–∞–∂–∞–ª–∏ –±—Ä–µ–Ω–¥ -> –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥–º–æ–¥–µ–ª–∏
    if choice.startswith("brand_"):
        brand = choice.replace("brand_", "")

        if brand == "TOYOTA":
            models = ["Toyota Hilux", "Toyota Land Cruiser"]
        elif brand == "FORD":
            models = ["Ford Ranger", "Ford Transit", "Ford Truck"]
        elif brand == "MITSUBISHI":
            models = ["Mitsubishi L200", "Mitsubishi ASX", "Mitsubishi Outlander"]
        elif brand == "VOLKSWAGEN":
            models = ["Volkswagen T6", "Volkswagen ID.4"]
        else:
            models = []

        keyboard = [[InlineKeyboardButton(m, callback_data=m)] for m in models]
        keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è Back | –ù–∞–∑–∞–¥", callback_data="back_to_brands")])
        keyboard.append([InlineKeyboardButton("‚ùå Cancel / –í—ñ–¥–º—ñ–Ω–∏—Ç–∏", callback_data="cancel")])

        try:
            await query.message.delete()
        except:
            pass

        await query.message.reply_text(
            f"Select model of {brand}:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return MODEL_SELECTION

    # –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ —Å–ø–∏—Å–æ–∫ –±—Ä–µ–Ω–¥–æ–≤
    if choice == "back_to_brands":
        return await mfr_location_selection(update, context)

    # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –º–æ–¥–µ–ª—å
    model_name = choice
    set_cell(ws, "C6", model_name)

    try:
        await query.message.delete()
    except:
        pass

    await query.message.reply_text(
        "Enter vehicle call sign (e.g. HP-12): \n–í–≤–µ–¥—ñ—Ç—å –≤–Ω—É—Ç—Ä—ñ—à–Ω—ñ–π –Ω–æ–º–µ—Ä –∞–≤—Ç–æ (–Ω–∞–ø—Ä. HP-12):",
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚ùå Cancel | –í—ñ–¥–º—ñ–Ω–∏—Ç–∏", callback_data="cancel")]])
    )
    return SERIAL




async def serial_input_mfr(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip().upper()
    text = text.replace(" ", "")

    if re.fullmatch(r"[A-Z]{2}\d{2}", text):
        text = text[:2] + "-" + text[2:]

    if not re.fullmatch(r"[A-Z]{2}-\d{2}", text):
        await update.message.reply_text(
            "‚ùå –ù–µ–≤—ñ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ –∞–≤—Ç–æ. –§–æ—Ä–º–∞—Ç –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏:(–Ω–∞–ø—Ä. HP-12)\nTry again | –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:"
        )
        return SERIAL

    ws = context.user_data['ws']
    set_cell(ws, "F6", text)

    # –ü–µ—Ä–≤—ã–π —É—Ä–æ–≤–µ–Ω—å Allocation
    keyboard = [[InlineKeyboardButton(x, callback_data=x)] for x in ["MTT", "MDD", "MECH", "NTS", "OPS/SUPP"]]
    keyboard.append([InlineKeyboardButton("‚ùå Cancel | –í—ñ–¥–º—ñ–Ω–∏—Ç–∏", callback_data="cancel")])

    await update.message.reply_text(
        "Choose Allocation | –û–±–µ—Ä—ñ—Ç—å Allocation:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return ALLOCATION


async def allocation_input_mfr(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if 'ws' not in context.user_data:
        await query.message.reply_text("‚ùå Please start from /start")
        return ConversationHandler.END

    ws = context.user_data['ws']
    selection = query.data

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã
    if selection == "cancel":
        return await cancel(update, context)

    # –õ–æ–∫–∞—Ü–∏–∏ Shyroke / Mykolaiv
    if selection in ["Shyroke", "Mykolaiv"]:
        context.user_data['location'] = selection
        set_cell(ws, "C9", selection)
        try: await query.message.delete()
        except: pass
        await query.message.reply_text(
            "Enter vehicle call sign (e.g. HP-12) | –í–≤–µ–¥—ñ—Ç—å –≤–Ω—É—Ç—Ä—ñ—à–Ω—ñ–π –Ω–æ–º–µ—Ä –∞–≤—Ç–æ (–Ω–∞–ø—Ä. HP-12):",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚ùå Cancel | –í—ñ–¥–º—ñ–Ω–∏—Ç–∏", callback_data="cancel")]])
        )
        return SERIAL

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª OPS/SUPP ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Ç–æ—Ä–æ–π —É—Ä–æ–≤–µ–Ω—å –∫–Ω–æ–ø–æ–∫
    if selection == "OPS/SUPP":
        keyboard = [[InlineKeyboardButton(x, callback_data=f"OPS/{x}")] for x in ["STFM","TFM","SUPV","LOGS","IMM","QA"]]
        keyboard.append([InlineKeyboardButton("‚ùå Cancel | –í—ñ–¥–º—ñ–Ω–∏—Ç–∏", callback_data="cancel")])
        try:
            await query.message.edit_text(
                "Choose sub-allocation for OPS/SUPP | –û–±–µ—Ä—ñ—Ç—å –ø—ñ–¥—Ä–æ–∑–ø–æ–¥—ñ–ª –¥–ª—è OPS/SUPP:",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        except:
            await query.message.reply_text(
                "Choose sub-allocation for OPS/SUPP | –û–±–µ—Ä—ñ—Ç—å –ø—ñ–¥—Ä–æ–∑–ø–æ–¥—ñ–ª –¥–ª—è OPS/SUPP:",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        return ALLOCATION

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–¥–∫–Ω–æ–ø–∫–∏ OPS/SUPP
    if selection.startswith("OPS/"):
        allocation_choice = selection.split("/")[1]
        set_cell(ws, "F9", f"{allocation_choice}")
        try: await query.message.delete()
        except: pass
        await query.message.reply_text(
            "Enter your full name | –í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ —ñ–º'—è —Ç–∞ –ø—Ä—ñ–∑–≤–∏—â–µ:",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚ùå Cancel | –í—ñ–¥–º—ñ–Ω–∏—Ç–∏", callback_data="cancel")]])
        )
        return USER

    # MTT, MDD, NTS ‚Äî —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–º–µ—Ä –∫–æ–º–∞–Ω–¥—ã
    if selection.upper() in ["MTT", "MDD", "NTS"]:
        context.user_data['allocation'] = selection.upper()
        try: await query.message.delete()
        except: pass
        await query.message.reply_text(
            f"Enter team number for {selection.upper()} | –í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –∫–æ–º–∞–Ω–¥–∏ –¥–ª—è {selection.upper()}:",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚ùå Cancel | –í—ñ–¥–º—ñ–Ω–∏—Ç–∏", callback_data="cancel")]])
        )
        return TEAM_NUMBER

    # MECH ‚Äî –ø—Ä–æ—Å—Ç–æ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–º—è
    if selection.upper() == "MECH":
        set_cell(ws, "F9", "MECH")
        try: await query.message.delete()
        except: pass
        await query.message.reply_text(
            "Enter your full name | –í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ —ñ–º'—è —Ç–∞ –ø—Ä—ñ–∑–≤–∏—â–µ:",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚ùå Cancel | –í—ñ–¥–º—ñ–Ω–∏—Ç–∏", callback_data="cancel")]])
        )
        return USER



    # –ï—Å–ª–∏ MTT, MDD, NTS ‚Äî —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–º–µ—Ä –∫–æ–º–∞–Ω–¥—ã
    if selection.upper() in ["MTT", "MDD", "NTS"]:
        context.user_data['allocation'] = selection.upper()
        try: await query.message.delete()
        except: pass
        await query.message.reply_text(
            f"Enter team number for {selection.upper()} | –í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –∫–æ–º–∞–Ω–¥–∏ –¥–ª—è {selection.upper()}:",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚ùå Cancel | –í—ñ–¥–º—ñ–Ω–∏—Ç–∏", callback_data="cancel")]])
        )
        return TEAM_NUMBER

    # –ï—Å–ª–∏ MECH ‚Äî –ø—Ä–æ—Å—Ç–æ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ Excel –∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–º—è
    if selection.upper() == "MECH":
        set_cell(ws, "F9", "MECH")
        try: await query.message.delete()
        except: pass
        await query.message.reply_text(
            "Enter your full name | –í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ —ñ–º'—è —Ç–∞ –ø—Ä—ñ–∑–≤–∏—â–µ:",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚ùå Cancel | –í—ñ–¥–º—ñ–Ω–∏—Ç–∏", callback_data="cancel")]])
        )
        return USER



async def team_number_input_mfr(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    if not text.isdigit():
        await update.message.reply_text("‚ùå Team number must be a number")
        return TEAM_NUMBER
    ws = context.user_data['ws']
    allocation = context.user_data.get('allocation')
    set_cell(ws, "F9", f"{allocation}-{text}")
    await update.message.reply_text(
        "Enter your full name | –í–≤–µ–¥—ñ—Ç—å –Ü–º'—è —Ç–∞ –ø—Ä—ñ–∑–≤–∏—â–µ:",
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("Cancel / –í—ñ–¥–º—ñ–Ω–∏—Ç–∏", callback_data="cancel")]])
    )
    return USER


async def user_input_mfr(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    if not text:
        await update.message.reply_text("‚ùå You did not enter your name")
        return USER
    user_name_latin = unidecode(text)
    ws = context.user_data['ws']
    set_cell(ws, "I6", user_name_latin)
    set_cell(ws, "B23", user_name_latin)
    location = context.user_data.get('location')
    manager_fa = {"Shyroke":"F.A. Oleksandr Rudnov","Mykolaiv":"F.A. Andriy Padalka"}.get(location,"F.A. Unknown")
    set_cell(ws, "F23", manager_fa)
    set_cell(ws, "C23", datetime.now().strftime("%Y-%m-%d"))
    set_cell(ws, "F12", datetime.now().strftime("%Y-%m-%d"))
    await update.message.reply_text(
        "Briefly describe the situation | –ö–æ—Ä–æ—Ç–∫–æ –æ–ø–∏—à—ñ—Ç—å —Å–∏—Ç—É–∞—Ü—ñ—é:",
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("Cancel / –í—ñ–¥–º—ñ–Ω–∏—Ç–∏", callback_data="cancel")]])
    )
    return DESCRIPTION



# =================== –û–ø–∏—Å–∞–Ω–∏–µ ===================



async def description_input_mfr(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    if not text:
        await update.message.reply_text("‚ùå Describe the situation / ‚ùå –û–ø–∏—à—ñ—Ç—å —Å–∏—Ç—É–∞—Ü—ñ—é")
        return DESCRIPTION

    text_en = await translate_to_en(text)
    ws = context.user_data['ws']

    # --- –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç –≤ –æ–¥–Ω—É —è—á–µ–π–∫—É –∏ –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–µ–º ---
    ws["B16"] = text_en
    ws["B16"].alignment = Alignment(horizontal="left", vertical="top", wrap_text=True)

    # --- –ê–≤—Ç–æ–ø–æ–¥–≥–æ–Ω–∫–∞ –≤—ã—Å–æ—Ç—ã —è—á–µ–π–∫–∏ –ø–æ–¥ —Ç–µ–∫—Å—Ç ---
    auto_height_for_cell(ws, "B16", min_height=50)

    # --- –ü–æ–¥–≥–æ–Ω–∫–∞ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —è—á–µ–µ–∫ ---
    auto_adjust(ws, ["F6", "C6", "C9", "F9", "I6", "F23", "C23"])

    # --- –õ–æ–≥–æ ---
    logo_path = os.path.join(os.path.dirname(__file__), "logo", "–õ–æ–≥–æ –µ–∫—Å–µ–ª—å.png")
    img = Image(logo_path)
    img.width, img.height = 396, 72
    ws.add_image(img, "B2")

    plate = ws["F6"].value or "CAR"
    filename = f"MFR_{plate}_{datetime.now().strftime('%Y-%m-%d_%H-%M')}.xlsx"

    # --- –û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä—É ---

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º –ø–æ –ª–æ–∫–∞—Ü–∏–∏
    location = context.user_data.get("location")
    manager_ids = MANAGERS.get(location, [])
    user_id = update.effective_user.id
    user_name = ALLOWED_USERS.get(user_id, "Unknown")  # –ø–æ–ª—É—á–∞–µ–º –∏–º—è –∏–∑ —Å–ª–æ–≤–∞—Ä—è

    for manager_id in manager_ids:
        file_stream = BytesIO()
        ws.parent.save(file_stream)
        file_stream.seek(0)
        await context.bot.send_document(chat_id=manager_id, document=file_stream, filename=filename)
        await context.bot.send_message(
            chat_id=manager_id,
            text=f"üìÑ –ù–æ–≤–∏–π MFR –∑–≤—ñ—Ç –ø–æ –ª–æ–∫–∞—Ü—ñ—ó {location} –≤—ñ–¥ {user_name}"
    )

 

    context.user_data.clear()
    await update.message.reply_text("‚úÖ Your report has been sent! / ‚úÖ –ó–≤—ñ—Ç –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ!")

    # --- –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Ñ–æ—Ç–æ ---
    logo_bytes_start = get_logo_bytes()
    logo_file = InputFile(logo_bytes_start, filename="logo.png")
    keyboard = [[InlineKeyboardButton("Start | –ü–æ—á–∞—Ç–∏", callback_data="main_menu")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_photo(photo=logo_file, caption="Welcome to NPA Fleet bot üöó", reply_markup=reply_markup)

    return ConversationHandler.END



#=============================================================MFR END=============================================================














#===================================================================CONTACTS====================================================

#@restricted
async def contacts_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    # –ï—Å–ª–∏ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥", –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    if query.data == "back":
        try:
            await query.message.delete()
        except:
            pass
        await main_menu(update, context)  # –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
        return

    text = (
        "üìå Locations / –õ–æ–∫–∞—Ü—ñ—ó:\n"
        "Select a location to see contacts | –û–±–µ—Ä—ñ—Ç—å –ª–æ–∫–∞—Ü—ñ—é –¥–ª—è –∫–æ–Ω—Ç–∞–∫—Ç—ñ–≤:"
    )

    keyboard = [
        [
            InlineKeyboardButton("Shyroke | –®–∏—Ä–æ–∫–µ", callback_data="contact_shyroke"),
            InlineKeyboardButton("Mykolaiv | –ú–∏–∫–æ–ª–∞—ó–≤", callback_data="contact_mykolaiv"),
        ],
        [InlineKeyboardButton("‚ùå Back | –ù–∞–∑–∞–¥", callback_data="back")]
    ]

    reply_markup = InlineKeyboardMarkup(keyboard)
    try:
        await query.message.delete()
    except:
        pass
    await query.message.reply_text(text=text, reply_markup=reply_markup)



#–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ª–æ–∫–∞—Ü–∏–∏
#@restricted
async def contact_location_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data

    if data == "back":
        try: await query.message.delete()
        except: pass
        await main_menu(update, context)
        return

    if data == "contact_shyroke":
        text = (
            "üìå Shyroke | –®–∏—Ä–æ–∫–µ\n"
            "üë§ F.A. Oleksandr Rudnov | F.A. –û–ª–µ–∫—Å–∞–Ω–¥—Ä –†—É–¥–Ω–æ–≤\n"
            "üìû Phone: +380 431 019 082\n"
            "üåê Map: https://goo.gl/maps/example1"
        )
        keyboard = [
            [InlineKeyboardButton("Car Wash | –ú–∏–π–∫–∞", url="https://goo.gl/maps/carwash_shyroke")],
            [InlineKeyboardButton("Tire Service | –®–∏–Ω–æ–º–æ–Ω—Ç–∞–∂", url="https://goo.gl/maps/tire_shyroke")],
            [InlineKeyboardButton("‚ùå Back | –ù–∞–∑–∞–¥", callback_data="contacts")]
        ]
    elif data == "contact_mykolaiv":
        text = (
            "üìå Mykolaiv | –ú–∏–∫–æ–ª–∞—ó–≤\n"
            "üë§ F.A. Andriy Padalka | F.A. –ê–Ω–¥—Ä—ñ–π –ü–∞–¥–∞–ª–∫–∞\n"
            "üìû Phone: +380 431 019 083\n"
            "üåê Map: https://goo.gl/maps/example2"
        )
        keyboard = [
            [InlineKeyboardButton("Car Wash | –ú–∏–π–∫–∞", url="https://goo.gl/maps/carwash_mykolaiv")],
            [InlineKeyboardButton("Tire Service | –®–∏–Ω–æ–º–æ–Ω—Ç–∞–∂", url="https://goo.gl/maps/tire_mykolaiv")],
            [InlineKeyboardButton("‚ùå Back | –ù–∞–∑–∞–¥", callback_data="contacts")]
        ]

    reply_markup = InlineKeyboardMarkup(keyboard)
    try: await query.message.delete()
    except: pass
    await query.message.reply_text(text=text, reply_markup=reply_markup)


#–ö–æ–Ω—Ç–∞–∫—Ç—ã –ø–æ –ª–æ–∫–∞—Ü–∏—è–º
LOCATIONS = {
    "shyroke": {
        "manager": {
            "name": "Oleksandr Rudnov | –û–ª–µ–∫—Å–∞–Ω–¥—Ä –†—É–¥–Ω–æ–≤",
            "phone": "+380987938674",
            "email": "OleRud441@npaid.org"
        },
        "senior_officer": {
            "position": "Senior Fleet Officer",
            "name": "Roman Kucherevskyi",
            "phone": "+380661930132",
            "email": "RomKuc884@npaid.org"
        },
        "car_washes": [
            {"name": "Avtoynhulstroy", "phone": "+380 67 633 1025", "map": "https://www.google.com/maps?cid=3778105884522161440"},
            {"name": "Nova Liniya", "phone": "+380 97 577 2770", "map": "https://www.google.com/maps?cid=1167848751790635382"},
        ],
        "tire_services": [
            {"name": "Avtoynhulstroy", "phone": "+380 67 633 1025", "map": "https://www.google.com/maps?cid=3778105884522161440"},
            {"name": "Nova Liniya", "phone": "+380 97 577 2770", "map": "https://www.google.com/maps?cid=1167848751790635382"},
            {"name": "SHYROKE - Tyre service", "phone": "+380 98 455 8113", "map": "https://maps.app.goo.gl/otgcPE4GaHowdxEj8"},
        ],
    },
    "mykolaiv": {
        "manager": {
            "name": "Andriy Padalka | –ê–Ω–¥—Ä—ñ–π –ü–∞–¥–∞–ª–∫–∞",
            "phone": "+380506008345",
            "email": "AndPad212@npaid.org"
        },
        "senior_officer": {
            "position": "Senior Fleet Officer",
            "name": "Roman Kucherevskyi",
            "phone": "+380661930132",
            "email": "RomKuc884@npaid.org"
        },
        "car_washes": [
            {"name": "Car Wash 1", "phone": "+380 432 000 001", "map": "https://goo.gl/maps/carwash1_mykolaiv"},
            {"name": "Car Wash 2", "phone": "+380 432 000 002", "map": "https://goo.gl/maps/carwash2_mykolaiv"},
        ],
        "tire_services": [
            {"name": "Tire Service 1", "phone": "+380 432 111 001", "map": "https://goo.gl/maps/tire1_mykolaiv"},
            {"name": "Tire Service 2", "phone": "+380 432 111 002", "map": "https://goo.gl/maps/tire2_mykolaiv"},
        ],
    }
}

#@restricted
async def contact_location_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data

    if data == "back":
        try: await query.message.delete()
        except: pass
        await contacts_callback(update, context)
        return

    loc_key = None
    action = None

    if data.startswith("contact_"):
        loc_key = data.split("_")[1]  # shyroke –∏–ª–∏ mykolaiv
        loc_data = LOCATIONS[loc_key]
        manager = loc_data["manager"]
        senior = loc_data["senior_officer"]

        text = (
            f"üìå {loc_key.capitalize()}\n\n"
            f"üë§ Fleet Assistant: {manager['name']}\n"
            f"üìû Phone: {manager['phone']}\n"
            f"‚úâÔ∏è Email: {manager['email']}\n\n"
            f"üëî {senior['position']}: {senior['name']}\n"
            f"üìû Phone: {senior['phone']}\n"
            f"‚úâÔ∏è Email: {senior['email']}\n\n"  
        )

        keyboard = [
            [InlineKeyboardButton("üßº Car Wash | –ú–∏–π–∫–∞", callback_data=f"{loc_key}_carwash")],
            [InlineKeyboardButton("üîß Tire Service | –®–∏–Ω–æ–º–æ–Ω—Ç–∞–∂", callback_data=f"{loc_key}_tire")],
            [InlineKeyboardButton("‚ùå Back | –ù–∞–∑–∞–¥", callback_data="contacts")]
        ]
    elif data.endswith("_carwash"):
        loc_key = data.split("_")[0]
        text = "üßº Car Washes | –ú–∏–π–∫–∏:\n\n"
        for wash in LOCATIONS[loc_key]["car_washes"]:
            text += f"{wash['name']}\nPhone: {wash['phone']}\nMap: {wash['map']}\n\n"
        keyboard = [[InlineKeyboardButton("‚ùå Back | –ù–∞–∑–∞–¥", callback_data=f"contact_{loc_key}")]]
    elif data.endswith("_tire"):
        loc_key = data.split("_")[0]
        text = "üîß Tire Services | –®–∏–Ω–æ–º–æ–Ω—Ç–∞–∂—ñ:\n\n"
        for tire in LOCATIONS[loc_key]["tire_services"]:
            text += f"{tire['name']}\nPhone: {tire['phone']}\nMap: {tire['map']}\n\n"
        keyboard = [[InlineKeyboardButton("‚ùå Back | –ù–∞–∑–∞–¥", callback_data=f"contact_{loc_key}")]]
    else:
        return

    reply_markup = InlineKeyboardMarkup(keyboard)
    try: await query.message.delete()
    except: pass
    await query.message.reply_text(text=text, reply_markup=reply_markup)

#===================================================================CONTACTS END===================================================











# =================== Main ===================
def main():
    app = Application.builder().token(TOKEN).build()

# LDR Conversation


#     ldr_conv = ConversationHandler(
#     entry_points=[CallbackQueryHandler(ldr_request_type_callback, pattern="^(flat_tire|wipers|Drivers_card|other_request)$")],
#     states={
#         SERIAL: [MessageHandler(filters.TEXT & ~filters.COMMAND, serial_input_ldr)],
#         ALLOCATION: [CallbackQueryHandler(allocation_input_ldr)],
#         TEAM_NUMBER: [MessageHandler(filters.TEXT & ~filters.COMMAND, team_number_input_ldr)],
#         USER: [MessageHandler(filters.TEXT & ~filters.COMMAND, user_input_ldr)],
#         DESCRIPTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, description_input_ldr)],
#         OTHER_REQUEST_INPUT: [MessageHandler(filters.TEXT & ~filters.COMMAND, ldr_other_request_input)],  # –Ω–æ–≤—ã–π —à–∞–≥
#     },
#     fallbacks=[CommandHandler("cancel", cancel), CallbackQueryHandler(cancel, pattern="cancel")],
#     per_user=True
# )



# # MFR Conversation
    
#     mfr_conv = ConversationHandler(
#     entry_points=[CallbackQueryHandler(mfr_callback, pattern="mfr")],
#     states={
#         # ------------------- –õ–æ–∫–∞—Ü–∏–∏ -------------------
#         ALLOCATION: [
#             CallbackQueryHandler(mfr_location_selection, pattern="^(Shyroke|Mykolaiv)$"),
#             CallbackQueryHandler(allocation_input_mfr)  # –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∞–ª–ª–æ–∫–∞—Ü–∏–∏
#         ],

#         # ------------------- –ë—Ä–µ–Ω–¥—ã –∏ –º–æ–¥–µ–ª–∏ -------------------
#         MODEL_SELECTION: [
#             CallbackQueryHandler(model_input_mfr, pattern="^(brand_.*|back_to_brands|.*)$")
#         ],

#         # ------------------- –í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö -------------------
#         SERIAL: [MessageHandler(filters.TEXT & ~filters.COMMAND, serial_input_mfr)],
#         TEAM_NUMBER: [MessageHandler(filters.TEXT & ~filters.COMMAND, team_number_input_mfr)],
#         USER: [MessageHandler(filters.TEXT & ~filters.COMMAND, user_input_mfr)],
#         DESCRIPTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, description_input_mfr)],
#     },
#     fallbacks=[
#         CommandHandler("cancel", cancel),
#         CallbackQueryHandler(cancel, pattern="cancel")
#     ],
#     per_user=True
# )
    # LDR Conversation
    ldr_conv = ConversationHandler(
        entry_points=[
            CallbackQueryHandler(ldr_request_type_callback, pattern="^(flat_tire|wipers|Drivers_card|other_request)$")
        ],
        states={
            SERIAL: [MessageHandler(filters.TEXT & ~filters.COMMAND, serial_input_ldr)],
            ALLOCATION: [CallbackQueryHandler(allocation_input_ldr)],
            TEAM_NUMBER: [MessageHandler(filters.TEXT & ~filters.COMMAND, team_number_input_ldr)],
            USER: [MessageHandler(filters.TEXT & ~filters.COMMAND, user_input_ldr)],
            DESCRIPTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, description_input_ldr)],
            OTHER_REQUEST_INPUT: [MessageHandler(filters.TEXT & ~filters.COMMAND, ldr_other_request_input)],
        },
        fallbacks=[
            CommandHandler("cancel", cancel),
            CallbackQueryHandler(cancel, pattern="cancel")
        ],
        per_user=True,
        conversation_timeout=300  # <--- —Ç–∞–π–º–∞—É—Ç 5 –º–∏–Ω—É—Ç
    )


    # MFR Conversation
    mfr_conv = ConversationHandler(
        entry_points=[CallbackQueryHandler(mfr_callback, pattern="mfr")],
        states={
            # ------------------- –õ–æ–∫–∞—Ü–∏–∏ -------------------
            ALLOCATION: [
                CallbackQueryHandler(mfr_location_selection, pattern="^(Shyroke|Mykolaiv)$"),
                CallbackQueryHandler(allocation_input_mfr)  # –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∞–ª–ª–æ–∫–∞—Ü–∏–∏
            ],

            # ------------------- –ë—Ä–µ–Ω–¥—ã –∏ –º–æ–¥–µ–ª–∏ -------------------
            MODEL_SELECTION: [
                CallbackQueryHandler(model_input_mfr, pattern="^(brand_.*|back_to_brands|.*)$")
            ],

            # ------------------- –í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö -------------------
            SERIAL: [MessageHandler(filters.TEXT & ~filters.COMMAND, serial_input_mfr)],
            TEAM_NUMBER: [MessageHandler(filters.TEXT & ~filters.COMMAND, team_number_input_mfr)],
            USER: [MessageHandler(filters.TEXT & ~filters.COMMAND, user_input_mfr)],
            DESCRIPTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, description_input_mfr)],
        },
        fallbacks=[
            CommandHandler("cancel", cancel),
            CallbackQueryHandler(cancel, pattern="cancel")
        ],
        per_user=True,
        conversation_timeout=300  # <--- —Ç–∞–π–º–∞—É—Ç 5 –º–∏–Ω—É—Ç
    )



    
    # Handlers
    app.add_handler(mfr_conv)
    # app.add_handler(other_questions_conv)
    app.add_handler(ldr_conv)
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(start_button_callback, pattern="main_menu"))
    app.add_handler(CallbackQueryHandler(ldr_callback, pattern="ldr"))
    app.add_handler(CallbackQueryHandler(mfr_callback, pattern="mfr"))
    app.add_handler(CallbackQueryHandler(contacts_callback, pattern="contacts"))
    




    app.add_handler(CallbackQueryHandler(cancel, pattern="cancel"))
    app.add_handler(CallbackQueryHandler(contacts_callback, pattern="^contacts$"))
    app.add_handler(CallbackQueryHandler(contact_location_callback, pattern="^contact_shyroke$|^contact_mykolaiv$|^shyroke_carwash$|^shyroke_tire$|^mykolaiv_carwash$|^mykolaiv_tire$|^back$"))


    app.run_polling()

if __name__ == "__main__":
    main()
