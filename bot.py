import logging
import os
import re
from io import BytesIO
from datetime import datetime
from unidecode import unidecode
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InputFile
from telegram.ext import (
    Application, CommandHandler, CallbackQueryHandler,
    MessageHandler, ConversationHandler, filters, ContextTypes
)
import json
from openpyxl import load_workbook
from openpyxl.drawing.image import Image
from openpyxl.styles import Alignment
from googletrans import Translator
import math




    # =================== –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö ===================
load_dotenv()
TOKEN = os.getenv("TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID"))

# =================== –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ===================
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)

# =================== –°–æ—Å—Ç–æ—è–Ω–∏—è ===================
SERIAL, ALLOCATION, TEAM_NUMBER, USER, DESCRIPTION = range(5)
translator = Translator()



# =================== –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ===================
def get_workbook(report_type="LDR"):
    current_dir = os.path.dirname(__file__)
    if report_type.upper() == "MFR":
        filename = "MFR.xlsx"
    else:
        filename = "LDR.xlsx"
    return load_workbook(os.path.join(current_dir, "excel", filename))


def get_logo_bytes():
    current_dir = os.path.dirname(__file__)
    with open(os.path.join(current_dir, "logo", "Drive the NPA way.png"), "rb") as f:
        return BytesIO(f.read())

async def translate_to_en(text: str) -> str:
    result = await translator.translate(text, dest='en')
    return result.text




def set_cell(ws, cell, value):
    try:
        ws[cell].value = value
    except AttributeError:
        # –µ—Å–ª–∏ –ø–æ–ø–∞–ª–∏ –≤ –æ–±—ä–µ–¥–∏–Ω—ë–Ω–Ω—É—é —è—á–µ–π–∫—É, –∏—â–µ–º –≤–µ—Ä—Ö–Ω—é—é –ª–µ–≤—É—é
        for merged_range in ws.merged_cells.ranges:
            if cell in merged_range:
                top_left = merged_range.min_row, merged_range.min_col
                ws.cell(row=top_left[0], column=top_left[1], value=value)
                break
def auto_adjust(ws, cells):
    for cell in cells:
        value = ws[cell].value
        if value:
            col_letter = ''.join(filter(str.isalpha, cell))
            ws.column_dimensions[col_letter].width = max(
                ws.column_dimensions[col_letter].width or 10,
                len(str(value)) + 2
            )
            ws.row_dimensions[ws[cell].row].height = max(
                ws.row_dimensions[ws[cell].row].height or 15,
                15
            )



# =================== –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ===================
async def main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("LDR (Lost / Damage) | –í—Ç—Ä–∞—á–µ–Ω–æ –∞–±–æ –ø–æ—à–∫–æ–¥–∂–µ–Ω–æ", callback_data="ldr")],
        [InlineKeyboardButton("MFR (Mechanical failure) | –ú–µ—Ö–∞–Ω—ñ—á–Ω–µ –ø–æ—à–∫–æ–¥–∂–µ–Ω–Ω—è –∞–≤—Ç–æ", callback_data="mfr")],
        [InlineKeyboardButton("Contacts | –ö–æ–Ω—Ç–∞–∫—Ç–∏", callback_data="contacts")],
        [InlineKeyboardButton("üö® –ü–æ—Ä—è–¥–æ–∫ –¥—ñ–π –ø—Ä–∏ –î–¢–ü | Accident Procedure", callback_data="accident_procedure")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    text = ("üá¨üáß EN\n"
            "Hello! This is the NPA Fleet bot üöó\n"
            "I can help you create reports for vehicles.\n\n"
            "üá∫üá¶ UA\n"
            "–ü—Ä–∏–≤—ñ—Ç! –¶–µ –±–æ—Ç NPA Fleet üöó\n"
            "–Ø –¥–æ–ø–æ–º–æ–∂—É –≤–∞–º —Å—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ –∑–≤—ñ—Ç–∏ –ø–æ –∞–≤—Ç–æ–º–æ–±—ñ–ª—è—Ö.\n\n"
            "What are you interested in today? / –©–æ –≤–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—å —Å—å–æ–≥–æ–¥–Ω—ñ?"
            )
    if update.callback_query:
        await update.callback_query.answer()
        try: await update.callback_query.message.delete()
        except: pass
        await update.callback_query.message.reply_text(text=text, reply_markup=reply_markup)
    else:
        await update.message.reply_text(text=text, reply_markup=reply_markup)





# –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å –¥–æ—Å—Ç—É–ø ‚Äî —Å—Ç–∞–≤–∏—à—å True
RESTRICTED_MODE = True

# =================== –†–∞–±–æ—Ç–∞ —Å JSON ===================
USERS_JSON = "allowed_users.json"

def load_allowed_users():
    if os.path.exists(USERS_JSON):
        with open(USERS_JSON, "r", encoding="utf-8") as f:
            return {int(k): v for k, v in json.load(f).items()}
    return {}

def save_allowed_users():
    with open(USERS_JSON, "w", encoding="utf-8") as f:
        json.dump({str(k): v for k, v in ALLOWED_USERS.items()}, f, ensure_ascii=False, indent=4)

ALLOWED_USERS = load_allowed_users()





# =================== –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ ===================
def restricted(func):
    async def wrapper(update: Update, context: ContextTypes.DEFAULT_TYPE, *args, **kwargs):
        user_id = update.effective_user.id
        if user_id not in ALLOWED_USERS:
            if update.message:
                await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–∏–π")
            elif update.callback_query:
                await update.callback_query.answer()
                await update.callback_query.message.reply_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–∏–π")
            return
        return await func(update, context, *args, **kwargs)
    return wrapper


# =================== –ö–æ–º–∞–Ω–¥—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/—É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ===================
@restricted
async def add_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id != ADMIN_ID:
        await update.message.reply_text("‚õî –õ–∏—à–µ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ –¥–æ–¥–∞–≤–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤.")
        return

    args = context.args
    if len(args) < 2:
        await update.message.reply_text("–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /add_user <tg_id> <—ñ–º'—è>")
        return

    try:
        new_id = int(args[0])
        name = " ".join(args[1:])
        ALLOWED_USERS[new_id] = name
        save_allowed_users()
        await update.message.reply_text(f"‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {name} ({new_id}) –¥–æ–¥–∞–Ω–æ –¥–æ —Å–ø–∏—Å–∫—É –¥–æ–∑–≤–æ–ª–µ–Ω–∏—Ö")
    except ValueError:
        await update.message.reply_text("‚õî –ù–µ–≤—ñ—Ä–Ω–∏–π ID")

@restricted
async def remove_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id != ADMIN_ID:
        await update.message.reply_text("‚õî –õ–∏—à–µ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ –≤–∏–¥–∞–ª—è—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤.")
        return

    args = context.args
    if len(args) != 1:
        await update.message.reply_text("–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /remove_user <tg_id>")
        return

    try:
        del_id = int(args[0])
        if del_id in ALLOWED_USERS:
            name = ALLOWED_USERS.pop(del_id)
            save_allowed_users()
            await update.message.reply_text(f"‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {name} ({del_id}) –≤–∏–¥–∞–ª–µ–Ω–æ")
        else:
            await update.message.reply_text("‚õî –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
    except ValueError:
        await update.message.reply_text("‚õî –ù–µ–≤—ñ—Ä–Ω–∏–π ID")

# =======================================================================================================



#=================================–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ –µ–∫—Ä–∞–Ω –¢–ì –±–æ—Ç–∞==================================
@restricted
async def list_users(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id != ADMIN_ID:
        await update.message.reply_text("‚õî –õ–∏—à–µ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ –ø–µ—Ä–µ–≥–ª—è–¥–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤")
        return

    if not ALLOWED_USERS:
        await update.message.reply_text("–°–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –ø–æ—Ä–æ–∂–Ω—ñ–π.")
        return

    text = "üìã –°–ø–∏—Å–æ–∫ –¥–æ–∑–≤–æ–ª–µ–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤:\n\n"
    for uid, name in ALLOWED_USERS.items():
        text += f"- {name} ({uid})\n"

    await update.message.reply_text(text)
# =======================================================================================================




@restricted
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id

    if RESTRICTED_MODE:
        if user_id not in ALLOWED_USERS:
            if update.message:
                await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–∏–π")
            elif update.callback_query:
                await update.callback_query.answer()
                await update.callback_query.message.reply_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–∏–π")
            return  # –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
        


    # –æ—á–∏—â–∞–µ–º user_data
    context.user_data.clear()

    # # –≥–æ—Ç–æ–≤–∏–º —Ñ–æ—Ç–æ
    logo_bytes = get_logo_bytes()
    logo_file = InputFile(logo_bytes, filename="logo.png")
    keyboard = [[InlineKeyboardButton("Start | –ü–æ—á–∞—Ç–∏", callback_data="main_menu")]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ
    if update.message:
        await update.message.reply_photo(photo=logo_file, caption="Welcome to NPA Fleet bot üöó", reply_markup=reply_markup)
    elif update.callback_query:
        await update.callback_query.answer()
        await update.callback_query.message.reply_photo(photo=logo_file, caption="Welcome to NPA Fleet bot üöó", reply_markup=reply_markup)

@restricted
async def start_button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await main_menu(update, context)

# =================== Cancel ===================
@restricted
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.clear()
    if update.callback_query:
        await update.callback_query.answer()
        try: await update.callback_query.message.delete()
        except: pass
    await main_menu(update, context)
    return ConversationHandler.END


MANAGERS = {
    "Shyroke": [ADMIN_ID],
    "Mykolaiv": [6093640376, 6488832046],
    "Kyiv": [ADMIN_ID],     
    "Sumy/Romny": [ADMIN_ID]
}



#==========================================================================DAMAGE================================================================
# –Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è –ø—Ä–∏ –î–¢–ü - –≥–æ–ª–æ–≤–Ω–∏–π –ø—É–Ω–∫—Ç
@restricted
async def accident_procedure_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    text = "üåê –û–±–µ—Ä—ñ—Ç—å –º–æ–≤—É / Choose language:"

    keyboard = [
        [InlineKeyboardButton("üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞", callback_data="accident_procedure_ua")],
        [InlineKeyboardButton("üá¨üáß English", callback_data="accident_procedure_en")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –í –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]

    reply_markup = InlineKeyboardMarkup(keyboard)

    try:
        await query.message.delete()
    except:
        pass

    await query.message.reply_text(text=text, reply_markup=reply_markup)


# –Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è –ø—Ä–∏ –î–¢–ü - —É–∫—Ä–∞—ó–Ω—Å—å–∫–∞
@restricted
async def accident_procedure_ua_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    text = (
    "üö® **–ü–æ—Ä—è–¥–æ–∫ –¥—ñ–π –ø—Ä–∏ –î–¢–ü** üö®\n\n"
    "1Ô∏è‚É£ –ù–µ–≥–∞–π–Ω–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –º—ñ—Å—Ü–µ–≤–∏—Ö –æ—Ä–≥–∞–Ω—ñ–≤ –≤–ª–∞–¥–∏, –æ—Ñ—ñ—Å—É NPA —Ç–∞ —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫–∞ –∞–≤—Ç–æ–ø–∞—Ä–∫—É, —è–∫–∏–π –∫–æ–Ω—Ç—Ä–æ–ª—é—î –≤–∞—à—É –ø–æ–¥–æ—Ä–æ–∂.\n"
    "2Ô∏è‚É£ –£–±–µ–∑–ø–µ—á—Ç–µ –º—ñ—Å—Ü–µ –∞–≤–∞—Ä—ñ—ó: –≤–∏—Å—Ç–∞–≤—Ç–µ –ø–æ–ø–µ—Ä–µ–¥–∂—É–≤–∞–ª—å–Ω–∏–π —Ç—Ä–∏–∫—É—Ç–Ω–∏–∫ —Ç–∞ –ø–æ–ø–µ—Ä–µ–¥–∂–∞–π—Ç–µ —ñ–Ω—à–∏–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç.\n"
    "3Ô∏è‚É£ –ó–∞–±–µ–∑–ø–µ—á—Ç–µ –∫–æ–º—Ñ–æ—Ä—Ç –ø–æ—Ç–µ—Ä–ø—ñ–ª–∏–º, –Ω–µ –ø–µ—Ä–µ–º—ñ—â—É–π—Ç–µ —ó—Ö –±–µ–∑ –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ—Å—Ç—ñ.\n"
    "4Ô∏è‚É£ –£ —Ä–∞–∑—ñ –ø–æ—Ç—Ä–µ–±–∏ –æ—Ä–≥–∞–Ω—ñ–∑—É–π—Ç–µ –¥–æ—Å—Ç–∞–≤–∫—É –ø–æ—Ä–∞–Ω–µ–Ω–∏—Ö –¥–æ –ª—ñ–∫–∞—Ä–Ω—ñ.\n"
    "5Ô∏è‚É£ –ù–µ –ø–µ—Ä–µ–º—ñ—â—É–π—Ç–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–∏–π –∑–∞—Å—ñ–± –¥–æ –ø—Ä–∏–±—É—Ç—Ç—è –ø–æ–ª—ñ—Ü—ñ—ó.\n"
    "6Ô∏è‚É£ –ù–µ –≤–∏–∑–Ω–∞–≤–∞–π—Ç–µ –∂–æ–¥–Ω–æ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω–æ—Å—Ç—ñ.\n"    
    "7Ô∏è‚É£ –ù–µ –∑–∞–ª–∏—à–∞–π—Ç–µ –º—ñ—Å—Ü–µ –î–¢–ü.\n"
    "8Ô∏è‚É£ –§—ñ–∫—Å—É–π—Ç–µ –ø–æ–¥—ñ—é (—Ñ–æ—Ç–æ/–≤—ñ–¥–µ–æ), —è–∫—â–æ —Ü–µ –±–µ–∑–ø–µ—á–Ω–æ.\n"
    "9Ô∏è‚É£ –ó–∞—Ö–∏—Å—Ç—ñ—Ç—å –æ—Å–æ–±–∏—Å—Ç—ñ —Ä–µ—á—ñ.\n"
    "üîü –£–Ω–∏–∫–∞–π—Ç–µ —Å—É–ø–µ—Ä–µ—á–æ–∫ –∑ —ñ–Ω—à–∏–º–∏ —É—á–∞—Å–Ω–∏–∫–∞–º–∏.\n"
    "1Ô∏è‚É£1Ô∏è‚É£ –í—ñ–∑—å–º—ñ—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç–∏ —Ç–∞ –¥–∞–Ω—ñ —Å—Ç—Ä–∞—Ö—É–≤–∞–Ω–Ω—è —ñ–Ω—à–∏—Ö —É—á–∞—Å–Ω–∏–∫—ñ–≤.\n"
    "1Ô∏è‚É£2Ô∏è‚É£ –ó–∞–ø–∏—à—ñ—Ç—å –º–∞—Ä–∫—É, –º–æ–¥–µ–ª—å, –∫–æ–ª—ñ—Ä —Ç–∞ –Ω–æ–º–µ—Ä–Ω—ñ –∑–Ω–∞–∫–∏ —ñ–Ω—à–∏—Ö –∞–≤—Ç–æ.\n"
    "1Ô∏è‚É£3Ô∏è‚É£ –ü—ñ–¥–≥–æ—Ç—É–π—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç–∏ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø–æ–ª—ñ—Ü—ñ—î—é (—è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ, —Å—É–ø—Ä–æ–≤–æ–¥–∂—É–π—Ç–µ –ø–æ–ª—ñ—Ü—ñ—é –¥–æ –≤—ñ–¥–¥—ñ–ª–∫—É)\n"
    "1Ô∏è‚É£4Ô∏è‚É£ –û—Ç—Ä–∏–º–∞–π—Ç–µ –∫–æ–ø—ñ—é –ø—Ä–æ—Ç–æ–∫–æ–ª—É.\n"
    "1Ô∏è‚É£5Ô∏è‚É£ –ü–æ–≤—ñ–¥–æ–º—Ç–µ –æ—Ñ—ñ—Ü–µ—Ä–∞ –∞–≤—Ç–æ–ø–∞—Ä–∫—É, –æ—Ñ—ñ—Ü–µ—Ä–∞ –±–µ–∑–ø–µ–∫–∏ —Ç–∞ –∫–µ—Ä—ñ–≤–Ω–∏–∫–∞ –ø—Ä–æ –ø–æ–¥—ñ—é.\n"
    "1Ô∏è‚É£6Ô∏è‚É£ –ó–∞–ø–æ–≤–Ω—ñ—Ç—å –∑–≤—ñ—Ç –ø—Ä–æ –î–¢–ü (VAR ‚Äì –¥–æ–¥–∞—Ç–æ–∫ E) –ø—Ä–æ—Ç—è–≥–æ–º 24 –≥–æ–¥–∏–Ω.\n"
)

    keyboard = [
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="accident_procedure")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –í –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]

    reply_markup = InlineKeyboardMarkup(keyboard)

    try:
        await query.message.delete()
    except:
        pass

    await query.message.reply_text(text=text, reply_markup=reply_markup, parse_mode="Markdown")


# –Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è –ø—Ä–∏ –î–¢–ü - –∞–Ω–≥–ª—ñ–π—Å—å–∫–∞
@restricted
async def accident_procedure_en_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    text = (
    "üö® **Accident Procedure** üö®\n\n"
    "1Ô∏è‚É£ Immediately contact local authorities, the NPA office, and the fleet officer supervising your journey.\n"
    "2Ô∏è‚É£ Secure the accident site: place a warning triangle and alert approaching traffic.\n"
    "3Ô∏è‚É£ Ensure comfort for the injured, do not move them unless necessary.\n"
    "4Ô∏è‚É£ If needed, arrange for the injured to be transported to the hospital.\n"
    "5Ô∏è‚É£ Do not move the vehicle until the police arrive.\n"
    "6Ô∏è‚É£ Do not admit any liability.\n"
    "7Ô∏è‚É£ Do not leave the accident site.\n"
    "8Ô∏è‚É£ Document the incident (photos/videos) if safe.\n"
    "9Ô∏è‚É£ Protect your personal belongings.\n"
    "üîü Avoid arguments or confrontations with other parties.\n"
    "1Ô∏è‚É£1Ô∏è‚É£ Obtain contact and insurance details from other parties involved.\n"
    "1Ô∏è‚É£2Ô∏è‚É£ Record the make, model, color, and registration numbers of other vehicles.\n"
    "1Ô∏è‚É£3Ô∏è‚É£ Prepare documents for police inspection (if required, accompany the police to the station).\n"
    "1Ô∏è‚É£4Ô∏è‚É£ Obtain a copy of the police report.\n"
    "1Ô∏è‚É£5Ô∏è‚É£ Inform the fleet officer, safety officer, and your project manager about the incident.\n"
    "1Ô∏è‚É£6Ô∏è‚É£ Complete the Vehicle Accident Report (VAR ‚Äì Annex E) within 24 hours.\n"
)


    keyboard = [
        [InlineKeyboardButton("‚¨ÖÔ∏è Back", callback_data="accident_procedure")],
        [InlineKeyboardButton("‚¨ÖÔ∏è Main Menu", callback_data="main_menu")]
    ]

    reply_markup = InlineKeyboardMarkup(keyboard)

    try:
        await query.message.delete()
    except:
        pass

    await query.message.reply_text(text=text, reply_markup=reply_markup, parse_mode="Markdown")



#=======================================================================END DAMAGE=============================================================================================









# ================================================================== LDR ========================================================================================================
SERIAL = 1
ODOMETER = 2
ALLOCATION = 3
TEAM_NUMBER = 4
USER = 5
DESCRIPTION = 6
OTHER_REQUEST_INPUT = 7


@restricted
async def ldr_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    keyboard = [
        [InlineKeyboardButton("Flat tire | –ü–æ—à–∫–æ–¥–∂–µ–Ω–µ –∫–æ–ª–µ—Å–æ", callback_data="flat_tire")],
        #[InlineKeyboardButton("Wipers replacement | –ó–∞–º—ñ–Ω–∞ –¥–≤–æ—Ä–Ω–∏–∫—ñ–≤", callback_data="wipers")],
        #[InlineKeyboardButton("Driver's card | –í–æ–¥—ñ–π—Å—å–∫–∞ –∫–∞—Ä—Ç–∞", callback_data="Drivers_card")],
        [InlineKeyboardButton("Other damage | –Ü–Ω—à–µ –ø–æ—à–∫–æ–¥–∂–µ–Ω–Ω—è", callback_data="other_request")],
        [InlineKeyboardButton("‚ùå Cancel | –í—ñ–¥–º—ñ–Ω–∏—Ç–∏", callback_data="cancel")]
    ]
    try: await query.message.delete()
    except: pass
    await query.message.reply_text("Choose request type:\n–í–∏–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è:", reply_markup=InlineKeyboardMarkup(keyboard))


@restricted
async def ldr_request_type_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data

    if data == "cancel":
        return await cancel(update, context)

    context.user_data['wb'] = get_workbook("LDR")
    context.user_data['ws'] = context.user_data['wb'].active
    ws = context.user_data['ws']

    if data == "other_request":
        try:
            await query.message.delete()
        except:
            pass

        # —Å–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫—É Cancel
        cancel_button = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚ùå Cancel", callback_data="cancel")]
        ])

        await query.message.reply_text(
            "Please indicate what is damaged:\n–í–∫–∞–∂—ñ—Ç—å, —â–æ –ø–æ—à–∫–æ–¥–∂–µ–Ω–æ:",
            reply_markup=cancel_button
        )
        
        return OTHER_REQUEST_INPUT  # <-- –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç—É, –∞ –Ω–µ —Å—Ç—Ä–æ–∫—É


    # –°—Ç–∞—Ä—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∫–Ω–æ–ø–æ–∫ —Å –≥–æ—Ç–æ–≤—ã–º–∏ —Ñ—Ä–∞–∑–∞–º–∏
    if data == "flat_tire":
        set_cell(ws, "C5", "Flat tyre")
    elif data == "wipers":
        set_cell(ws, "C5", "Wipers replacement")
    elif data == "Drivers_card":
        set_cell(ws, "C5", "Driver's card")    

    set_cell(ws, "F5", "Serial / ID / –°–µ—Ä—ñ–π–Ω–∏–π –Ω–æ–º–µ—Ä / ID")

    keyboard = [
        [InlineKeyboardButton("Shyroke", callback_data="Shyroke")],
        [InlineKeyboardButton("Mykolaiv", callback_data="Mykolaiv")],
        [InlineKeyboardButton("Kyiv", callback_data="Kyiv")],
        [InlineKeyboardButton("Sumy/Romny", callback_data="Sumy/Romny")],
        [InlineKeyboardButton("‚ùå Cancel / –í—ñ–¥–º—ñ–Ω–∏—Ç–∏", callback_data="cancel")]
    ]
    try: await query.message.delete()
    except: pass
    await query.message.reply_text(
        "Select vehicle location:\n–û–±–µ—Ä—ñ—Ç—å –ª–æ–∫–∞—Ü—ñ—é –∞–≤—Ç–æ–º–æ–±—ñ–ª—è:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return ALLOCATION



# –ù–æ–≤—ã–π —Ö—ç–Ω–¥–ª–µ—Ä –¥–ª—è –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
from googletrans import Translator

translator = Translator()

async def translate_to_en(text: str) -> str:
    # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –≤—ã–∑—ã–≤–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥
    translated = await translator.translate(text, dest='en')
    return translated.text

@restricted
async def ldr_other_request_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_text = update.message.text.strip()
    if not user_text:
        await update.message.reply_text("‚ùå Please type your request / ‚ùå –í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è")
        return OTHER_REQUEST_INPUT

    ws = context.user_data['ws']

    # –ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
    translated_text = await translate_to_en(user_text)

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥ –≤ Excel
    set_cell(ws, "C5", translated_text)
    set_cell(ws, "F5", "Serial / ID / –°–µ—Ä—ñ–π–Ω–∏–π –Ω–æ–º–µ—Ä / ID")

    keyboard = [
        [InlineKeyboardButton("Shyroke", callback_data="Shyroke")],
        [InlineKeyboardButton("Mykolaiv", callback_data="Mykolaiv")],
        [InlineKeyboardButton("Kyiv", callback_data="Kyiv")],
        [InlineKeyboardButton("Sumy/Romny", callback_data="Sumy/Romny")],
        [InlineKeyboardButton("‚ùå Cancel / –í—ñ–¥–º—ñ–Ω–∏—Ç–∏", callback_data="cancel")]
    ]
    await update.message.reply_text(
        "Select vehicle location:\n–û–±–µ—Ä—ñ—Ç—å –ª–æ–∫–∞—Ü—ñ—é –∞–≤—Ç–æ–º–æ–±—ñ–ª—è:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return ALLOCATION

# =================== –í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö ===================


async def serial_input_ldr(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip().upper()  # –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ –≤–µ—Ä—Ö–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä
    text = text.replace(" ", "")  # —É–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª –±–µ–∑ –¥–µ—Ñ–∏—Å–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä AA12, –¥–æ–±–∞–≤–∏–º –¥–µ—Ñ–∏—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
    if re.fullmatch(r"[A-Z]{2}\d{2}", text):
        text = text[:2] + "-" + text[2:]

    # –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞: –¥–≤–µ –±—É–∫–≤—ã - –¥–µ—Ñ–∏—Å - –¥–≤–µ —Ü–∏—Ñ—Ä—ã
    if not re.fullmatch(r"[A-Z]{2}-\d{2}", text):
        await update.message.reply_text(
            "‚ùå –§–æ—Ä–º–∞—Ç –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏:(–Ω–∞–ø—Ä. HP-01)\n        Format must be:(e.g. HP-01)"
        )
        return SERIAL

    ws = context.user_data['ws']
    set_cell(ws, "F5", text)

    # –¢–µ–ø–µ—Ä—å –≤–º–µ—Å—Ç–æ ALLOCATION ‚Üí —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –æ–¥–æ–º–µ—Ç—Ä
    await update.message.reply_text(
        "Enter current odometer value (km):\n–í–≤–µ–¥—ñ—Ç—å –ø–æ—Ç–æ—á–Ω–∏–π –ø—Ä–æ–±—ñ–≥ (–∫–º):",
        reply_markup=InlineKeyboardMarkup(
            [[InlineKeyboardButton("‚ùå Cancel | –í—ñ–¥–º—ñ–Ω–∏—Ç–∏", callback_data="cancel")]]
        )
    )
    return ODOMETER



async def odometer_input_ldr(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()

    if not text.isdigit():
        await update.message.reply_text("‚ùå Odometer must be a number (in km)\n‚ùå –ü—Ä–æ–±—ñ–≥ –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ —á–∏—Å–ª–æ–º (–≤ –∫–º)")
        return ODOMETER

    ws = context.user_data['ws']
    set_cell(ws, "I8", int(text))  # –Ω–∞–ø—Ä–∏–º–µ—Ä –ø–∏—à–µ–º –ø—Ä–æ–±–µ–≥ –≤ C9

    # –ü–æ—Å–ª–µ –æ–¥–æ–º–µ—Ç—Ä–∞ ‚Üí –≤—ã–±–æ—Ä Allocation
    keyboard = [
        [InlineKeyboardButton(x, callback_data=x)] for x in ["MTT","MDD","MECH","NTS","OPS/SUPP","ADMIN"]
    ]
    keyboard.append([InlineKeyboardButton("‚ùå Cancel | –í—ñ–¥–º—ñ–Ω–∏—Ç–∏", callback_data="cancel")])

    await update.message.reply_text(
        "Choose Allocation:\n–û–±–µ—Ä—ñ—Ç—å –†–æ–∑–ø–æ–¥—ñ–ª:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return ALLOCATION



async def allocation_input_ldr(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    selection = query.data

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ workbook
    if 'ws' not in context.user_data:
        await query.message.reply_text(
            "‚ùå Please start the request from the beginning using /start\n‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –ø–æ—á–Ω—ñ—Ç—å –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è –∑–∞–Ω–æ–≤–æ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é /start"
        )
        return ConversationHandler.END

    ws = context.user_data['ws']

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã
    if selection == "cancel":
        return await cancel(update, context)

    # –õ–æ–∫–∞—Ü–∏–∏ Shyroke / Mykolaiv
    if selection in ["Shyroke", "Mykolaiv", "Kyiv", "Sumy/Romny"]:
        context.user_data['location'] = selection
        set_cell(ws, "C8", selection)
        try: await query.message.delete()
        except: pass
        await query.message.reply_text(
            "Enter vehicle call sign (e.g. HP-01): \n–í–≤–µ–¥—ñ—Ç—å –≤–Ω—É—Ç—Ä—ñ—à–Ω—ñ–π –Ω–æ–º–µ—Ä –∞–≤—Ç–æ (–Ω–∞–ø—Ä. HP-01):",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚ùå Cancel | –í—ñ–¥–º—ñ–Ω–∏—Ç–∏", callback_data="cancel")]])
        )
        return SERIAL

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª OPS/SUPP ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Ç–æ—Ä–æ–π —É—Ä–æ–≤–µ–Ω—å –∫–Ω–æ–ø–æ–∫
    if selection == "OPS/SUPP":
        keyboard = [[InlineKeyboardButton(x, callback_data=f"OPS/{x}")] for x in ["STFM","TFM","SUPV","LOGS","IMM","QA"]]
        keyboard.append([InlineKeyboardButton("‚ùå Cancel | –í—ñ–¥–º—ñ–Ω–∏—Ç–∏", callback_data="cancel")])
        try: await query.message.delete()
        except: pass
        await query.message.reply_text(
            "Choose sub-allocation for OPS/SUPP:\n–û–±–µ—Ä—ñ—Ç—å –ø—ñ–¥—Ä–æ–∑–ø–æ–¥—ñ–ª –¥–ª—è OPS/SUPP:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return ALLOCATION  # –æ—Å—Ç–∞—ë–º—Å—è –Ω–∞ —ç—Ç–æ–º –∂–µ —à–∞–≥–µ, –∂–¥—ë–º –≤—Ç–æ—Ä–æ–π –≤—ã–±–æ—Ä

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–¥–∫–Ω–æ–ø–∫–∏ OPS/SUPP
    if selection.startswith("OPS/"):
        allocation_choice = selection.split("/")[1]
        set_cell(ws, "F8", f"{allocation_choice}")
        try: await query.message.delete()
        except: pass
        await query.message.reply_text(
            "Enter your full name:\n–í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ –Ü–º'—è —Ç–∞ –ø—Ä—ñ–∑–≤–∏—â–µ:",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚ùå Cancel | –í—ñ–¥–º—ñ–Ω–∏—Ç–∏", callback_data="cancel")]])
        )
        return USER

    # –ï—Å–ª–∏ MTT, MDD, NTS ‚Äî —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–º–µ—Ä –∫–æ–º–∞–Ω–¥—ã
    if selection.upper() in ["MTT", "MDD", "NTS"]:
        context.user_data['allocation'] = selection.upper()
        try: await query.message.delete()
        except: pass
        await query.message.reply_text(
            f"Enter team number for {selection.upper()}:\n–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –∫–æ–º–∞–Ω–¥–∏ –¥–ª—è {selection.upper()}:",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚ùå Cancel | –í—ñ–¥–º—ñ–Ω–∏—Ç–∏", callback_data="cancel")]])
        )
        return TEAM_NUMBER

    # –ï—Å–ª–∏ MECH ‚Äî –ø—Ä–æ—Å—Ç–æ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ Excel –∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–º—è
    if selection.upper() in ("MECH", "ADMIN"):
        set_cell(ws, "F8", selection.upper())
        try: 
            await query.message.delete()
        except: 
            pass
        await query.message.reply_text(
            "Enter your full name:\n–í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ –Ü–º'—è —Ç–∞ –ø—Ä—ñ–∑–≤–∏—â–µ:",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚ùå Cancel | –í—ñ–¥–º—ñ–Ω–∏—Ç–∏", callback_data="cancel")]])
        )
        return USER


async def team_number_input_ldr(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    if not text.isdigit():
        await update.message.reply_text("‚ùå Team number must be a number")
        return TEAM_NUMBER
    ws = context.user_data['ws']
    allocation = context.user_data.get('allocation')
    set_cell(ws, "F8", f"{allocation}-{text}")
    await update.message.reply_text(
        "Enter your full name:\n–í–≤–µ–¥—ñ—Ç—å –Ü–º'—è —Ç–∞ –ø—Ä—ñ–∑–≤–∏—â–µ:",
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("Cancel / –í—ñ–¥–º—ñ–Ω–∏—Ç–∏", callback_data="cancel")]])
    )
    return USER


async def user_input_ldr(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    if not text:
        await update.message.reply_text("‚ùå You did not enter your name")
        return USER
    user_name_latin = unidecode(text)
    ws = context.user_data['ws']
    set_cell(ws, "I5", user_name_latin)
    set_cell(ws, "B19", user_name_latin)
    location = context.user_data.get('location')
    manager_fa = {"Shyroke": "F.A. Oleksandr Rudnov",
                  "Mykolaiv": "F.A. Andriy Padalka",
                  "Kyiv": "F.A. Oleksandr Rudnov",
                  "Sumy/Romny": "F.A. Oleksandr Rudnov"}.get(location,"F.A. Unknown")
    set_cell(ws, "F19", manager_fa)
    set_cell(ws, "C19", datetime.now().strftime("%Y-%m-%d"))
    await update.message.reply_text(
        "Detailed description of events leading to the loss or damage:\n–î–µ—Ç–∞–ª—å–Ω–∏–π –æ–ø–∏—Å –ø–æ–¥—ñ–π, —â–æ –ø—Ä–∏–∑–≤–µ–ª–∏ –¥–æ –≤—Ç—Ä–∞—Ç–∏ –∞–±–æ –ø–æ—à–∫–æ–¥–∂–µ–Ω–Ω—è:",
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚ùå Cancel / –í—ñ–¥–º—ñ–Ω–∏—Ç–∏", callback_data="cancel")]])
    )
    return DESCRIPTION



# =================== –û–ø–∏—Å–∞–Ω–∏–µ ===================




def auto_height_for_cell(ws, cell_address):
    cell = ws[cell_address]
    cell.alignment = Alignment(horizontal="left", vertical="bottom", wrap_text=True)

    # –ü–æ–ª—É—á–∞–µ–º —à–∏—Ä–∏–Ω—É –∫–æ–ª–æ–Ω–∫–∏ –≤ —Å–∏–º–≤–æ–ª–∞—Ö (–ø—Ä–∏–±–ª–∏–∂—ë–Ω–Ω–æ)
    col_letter = ''.join(filter(str.isalpha, cell_address))
    col_width = ws.column_dimensions[col_letter].width or 10  # –µ—Å–ª–∏ –Ω–µ –∑–∞–¥–∞–Ω–æ, —Å—Ç–∞–≤–∏–º 10

    # –û—Ü–µ–Ω–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Ç—Ä–æ–∫: –¥–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞ / —à–∏—Ä–∏–Ω–∞ –∫–æ–ª–æ–Ω–∫–∏
    text_length = len(str(cell.value))
    lines_needed = math.ceil(text_length / col_width)

    # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –≤—ã—Å–æ—Ç–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ ~15
    ws.row_dimensions[cell.row].height = lines_needed * 15

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Ç–≤–æ–µ–π —Ñ—É–Ω–∫—Ü–∏–∏:



async def description_input_ldr(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    if not text:
        await update.message.reply_text("‚ùå Describe the situation:\n‚ùå –û–ø–∏—à—ñ—Ç—å —Å–∏—Ç—É–∞—Ü—ñ—é")
        return DESCRIPTION

    text_en = await translate_to_en(text)
    ws = context.user_data['ws']






def split_text(text, words_per_line=12):
    """–†–∞–∑–±–∏–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –Ω–∞ —Å—Ç—Ä–æ–∫–∏ –ø—Ä–∏–º–µ—Ä–Ω–æ –ø–æ 20 —Å–ª–æ–≤"""
    words = text.split()
    return [" ".join(words[i:i+words_per_line]) for i in range(0, len(words), words_per_line)]

async def description_input_ldr(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    if not text:
        await update.message.reply_text("‚ùå Describe the situation:\n‚ùå –û–ø–∏—à—ñ—Ç—å —Å–∏—Ç—É–∞—Ü—ñ—é")
        return DESCRIPTION

    text_en = await translate_to_en(text)
    ws = context.user_data['ws']

    # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ –∫—É—Å–∫–∏
    lines = split_text(text_en, words_per_line=20)

    # –≤—Å—Ç–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ –ø–æ —Å—Ç—Ä–æ–∫–∞–º
    start_row = 13  # —Ç–µ–ø–µ—Ä—å B13
    for i, line in enumerate(lines, start=start_row):
        if i > 20:
            break
        cell = ws[f"B{i}"]
        cell.value = line
        cell.alignment = Alignment(horizontal="left", vertical="bottom")


    # –ü–æ–¥–≥–æ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä—ã –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —è—á–µ–µ–∫
    auto_adjust(ws, ["C5","F5","C8","F8","I5","B19","C19","F19"])


    

    plate = ws["F5"].value or "CAR"
    filename = f"LDR_{plate}_{datetime.now().strftime('%Y-%m-%d_%H-%M')}.xlsx"

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º –ø–æ –ª–æ–∫–∞—Ü–∏–∏


    # –û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º –ø–æ –ª–æ–∫–∞—Ü–∏–∏
    location = context.user_data.get("location")
    manager_ids = MANAGERS.get(location, [])
    user_id = update.effective_user.id
    user_name = ALLOWED_USERS.get(user_id, "Unknown")  # –ø–æ–ª—É—á–∞–µ–º –∏–º—è –∏–∑ —Å–ª–æ–≤–∞—Ä—è

    for manager_id in manager_ids:
        file_stream = BytesIO()
        ws.parent.save(file_stream)
        file_stream.seek(0)
        await context.bot.send_document(chat_id=manager_id, document=file_stream, filename=filename)
        await context.bot.send_message(
            chat_id=manager_id,
            text=f"üìÑ –ù–æ–≤–∏–π LDR –∑–≤—ñ—Ç –ø–æ –ª–æ–∫–∞—Ü—ñ—ó {location} –≤—ñ–¥ {user_name}"
        )

    context.user_data.clear()

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await update.message.reply_text("‚úÖ –ó–≤—ñ—Ç –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ Fleet —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫—É, –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ –¥–æ –æ–±—Ä–∞–Ω–æ—ó –ª–æ–∫–∞—Ü—ñ—ó.\n–í–∞–º –∑–∞–ª–∏—à–∏–ª–æ—Å—å –ª–∏—à–µ –ø—ñ–¥–ø–∏—Å–∞—Ç–∏ –π–æ–≥–æ.\n\n‚úÖ The report has been sent to the Fleet of chosen location.\n You only need to sign it.")

    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Ñ–æ—Ç–æ —Å –∫–Ω–æ–ø–∫–æ–π
    logo_bytes_start = get_logo_bytes()
    logo_file = InputFile(logo_bytes_start, filename="logo.png")
    keyboard = [[InlineKeyboardButton("Start | –ü–æ—á–∞—Ç–∏", callback_data="main_menu")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_photo(photo=logo_file, caption="Welcome to NPA Fleet bot üöó", reply_markup=reply_markup)

    return ConversationHandler.END

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ-–ø–æ–¥–≥–æ–Ω–∫–∏ –≤—ã—Å–æ—Ç—ã —Å—Ç—Ä–æ–∫–∏ A9 —Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –∑–∞—â–∏—Ç–æ–π
def auto_height_for_cell(ws, cell_address, min_height=45):
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≤—ã—Å–æ—Ç–∞ —Å—Ç—Ä–æ–∫–∏ –ø–æ–¥ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ, –Ω–æ –Ω–µ –º–µ–Ω—å—à–µ min_height"""
    cell = ws[cell_address]
    row = cell.row
    lines = str(cell.value).count('\n') + 1
    # –†–∞—Å—á–µ—Ç –≤—ã—Å–æ—Ç—ã: 15 –ø–∏–∫—Å–µ–ª–µ–π –Ω–∞ —Å—Ç—Ä–æ–∫—É
    height = max(lines * 15, min_height)
    ws.row_dimensions[row].height = height






# =================== –ó–∞–≥–ª—É—à–∫–∏ ===================
async def generic_stub(update: Update, context: ContextTypes.DEFAULT_TYPE, name="Function"):
    query = update.callback_query
    await query.answer()
    keyboard = [[InlineKeyboardButton("‚ùå Cancel | –í—ñ–¥–º—ñ–Ω–∏—Ç–∏", callback_data="cancel")]]
    try: await query.message.delete()
    except: pass
    await query.message.reply_text(f"You selected {name}. Function in progress.", reply_markup=InlineKeyboardMarkup(keyboard))


#=====================================================LDR END=============================================================================
















#=====================================================MFR=================================================================================



# ------------------------- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π -------------------------
MFR_ALLOCATION, MFR_MODEL_SELECTION, MFR_SERIAL, MFR_ODOMETER, MFR_TEAM_NUMBER, MFR_USER, MFR_DESCRIPTION = range(7)



# ------------------------- –ù–∞—á–∞–ª–æ MFR -------------------------
@restricted
async def mfr_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    # –°–æ–∑–¥–∞–µ–º workbook –¥–ª—è MFR
    context.user_data['wb'] = get_workbook("MFR")
    context.user_data['ws'] = context.user_data['wb'].active
    ws = context.user_data['ws']

    set_cell(ws, "F6", "Serial / ID / –°–µ—Ä—ñ–π–Ω–∏–π –Ω–æ–º–µ—Ä / ID")

    keyboard = [
        [InlineKeyboardButton("Shyroke", callback_data="Shyroke")],
        [InlineKeyboardButton("Mykolaiv", callback_data="Mykolaiv")],
        [InlineKeyboardButton("Kyiv", callback_data="Kyiv")],
        [InlineKeyboardButton("Sumy/Romny", callback_data="Sumy/Romny")],
        [InlineKeyboardButton("‚ùå Cancel | –í—ñ–¥–º—ñ–Ω–∏—Ç–∏", callback_data="cancel")]
    ]

    try: await query.message.delete()
    except: pass

    await query.message.reply_text(
        "Select vehicle location:\n–û–±–µ—Ä—ñ—Ç—å –ª–æ–∫–∞—Ü—ñ—é –∞–≤—Ç–æ–º–æ–±—ñ–ª—è:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return MFR_ALLOCATION

# ------------------------- –í—ã–±–æ—Ä –ª–æ–∫–∞—Ü–∏–∏ -------------------------
async def mfr_location_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    location = query.data
    if location == "cancel":
        return await cancel(update, context)

    ws = context.user_data['ws']
    set_cell(ws, "C9", location)
    context.user_data['location'] = location

    try: await query.message.delete()
    except: pass

    keyboard = [
        [InlineKeyboardButton("TOYOTA", callback_data="brand_TOYOTA")],
        [InlineKeyboardButton("FORD", callback_data="brand_FORD")],
        [InlineKeyboardButton("MITSUBISHI", callback_data="brand_MITSUBISHI")],
        [InlineKeyboardButton("VOLKSWAGEN", callback_data="brand_VOLKSWAGEN")],
        [InlineKeyboardButton("RENAULT DUSTER", callback_data="RENAULT DUSTER")],
        [InlineKeyboardButton("SKODA KODIAQ", callback_data="SKODA KODIAQ")],
        [InlineKeyboardButton("‚ùå Cancel / –í—ñ–¥–º—ñ–Ω–∏—Ç–∏", callback_data="cancel")]
    ]

    await query.message.reply_text(
        "Select car brand:\n–û–±–µ—Ä—ñ—Ç—å –º–∞—Ä–∫—É –∞–≤—Ç–æ:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return MFR_MODEL_SELECTION

# ------------------------- –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ –∞–≤—Ç–æ -------------------------
async def model_input_mfr(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    choice = query.data
    ws = context.user_data['ws']

    if choice == "cancel":
        return await cancel(update, context)

    if choice.startswith("brand_"):
        brand = choice.replace("brand_", "")
        if brand == "TOYOTA": models = ["Toyota Hilux", "Toyota Land Cruiser"]
        elif brand == "FORD": models = ["Ford Ranger", "Ford Transit", "Ford Truck"]
        elif brand == "MITSUBISHI": models = ["Mitsubishi L200", "Mitsubishi ASX", "Mitsubishi Outlander"]
        elif brand == "VOLKSWAGEN": models = ["Volkswagen T6", "Volkswagen ID.4"]
        else: models = []

        keyboard = [[InlineKeyboardButton(m, callback_data=m)] for m in models]
        keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è Back | –ù–∞–∑–∞–¥", callback_data="back_to_brands")])
        keyboard.append([InlineKeyboardButton("‚ùå Cancel / –í—ñ–¥–º—ñ–Ω–∏—Ç–∏", callback_data="cancel")])

        try: await query.message.delete()
        except: pass

        await query.message.reply_text(
            f"Select model of {brand}:\n–í–∏–±–µ—Ä—ñ—Ç—å –º–æ–¥–µ–ª—å {brand}:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return MFR_MODEL_SELECTION

    if choice == "back_to_brands":
        return await mfr_location_selection(update, context)

    # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –º–æ–¥–µ–ª—å
    set_cell(ws, "C6", choice)

    try: await query.message.delete()
    except: pass

    await query.message.reply_text(
        "Enter vehicle call sign (e.g. HP-01):\n–í–≤–µ–¥—ñ—Ç—å –≤–Ω—É—Ç—Ä—ñ—à–Ω—ñ–π –Ω–æ–º–µ—Ä –∞–≤—Ç–æ (–Ω–∞–ø—Ä. HP-01):",
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚ùå Cancel | –í—ñ–¥–º—ñ–Ω–∏—Ç–∏", callback_data="cancel")]])
    )
    return MFR_SERIAL

# ------------------------- –í–≤–æ–¥ –Ω–æ–º–µ—Ä–∞ –∞–≤—Ç–æ -------------------------
async def serial_input_mfr(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip().upper().replace(" ", "")
    if re.fullmatch(r"[A-Z]{2}\d{2}", text): text = text[:2] + "-" + text[2:]
    if not re.fullmatch(r"[A-Z]{2}-\d{2}", text):
        await update.message.reply_text("‚ùå –§–æ—Ä–º–∞—Ç –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏:(–Ω–∞–ø—Ä. HP-01)\nFormat must be:(e.g. HP-01)")
        return MFR_SERIAL

    ws = context.user_data['ws']
    set_cell(ws, "F6", text)

    await update.message.reply_text(
        "Enter odometer reading (km):\n–í–≤–µ–¥—ñ—Ç—å –ø–æ—Ç–æ—á–Ω–∏–π –ø—Ä–æ–±—ñ–≥ (–∫–º):",
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚ùå Cancel | –í—ñ–¥–º—ñ–Ω–∏—Ç–∏", callback_data="cancel")]])
    )
    return MFR_ODOMETER

# ------------------------- –í–≤–æ–¥ –æ–¥–æ–º–µ—Ç—Ä–∞ -------------------------
async def odometer_input_mfr(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    if not text.isdigit():
        await update.message.reply_text("‚ùå Odometer must be a number\n‚ùå –û–¥–æ–º–µ—Ç—Ä –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ —á–∏—Å–ª–æ–º")
        return MFR_ODOMETER

    ws = context.user_data['ws']
    set_cell(ws, "I8", text)

    keyboard = [[InlineKeyboardButton(x, callback_data=x)] for x in ["MTT", "MDD", "MECH", "NTS", "OPS/SUPP", "ADMIN"]]
    keyboard.append([InlineKeyboardButton("‚ùå Cancel | –í—ñ–¥–º—ñ–Ω–∏—Ç–∏", callback_data="cancel")])

    await update.message.reply_text(
        "Choose Allocation:\n–û–±–µ—Ä—ñ—Ç—å –ø—ñ–¥—Ä–æ–∑–¥—ñ–ª:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return MFR_ALLOCATION



@restricted
async def allocation_input_mfr(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    ws = context.user_data['ws']
    selection = query.data

    if selection == "cancel":
        return await cancel(update, context)

    # ---------------- –õ–æ–∫–∞—Ü–∏–∏ ----------------
    if selection in ["Shyroke", "Mykolaiv", "Kyiv", "Sumy/Romny"]:
        context.user_data['location'] = selection
        set_cell(ws, "C9", selection)
        try:
            await query.message.delete()
        except:
            pass
        await query.message.reply_text(
            "Enter vehicle call sign (e.g. HP-01):",
            reply_markup=InlineKeyboardMarkup(
                [[InlineKeyboardButton("‚ùå Cancel | –í—ñ–¥–º—ñ–Ω–∏—Ç–∏", callback_data="cancel")]]
            )
        )
        return MFR_SERIAL

    # ---------------- OPS/SUPP ----------------
    if selection == "OPS/SUPP":
        keyboard = [[InlineKeyboardButton(x, callback_data=f"OPS/{x}")]
                    for x in ["STFM", "TFM", "SUPV", "LOGS", "IMM", "QA"]]
        keyboard.append([InlineKeyboardButton("‚ùå Cancel | –í—ñ–¥–º—ñ–Ω–∏—Ç–∏", callback_data="cancel")])

        try:
            await query.message.edit_text(
                "Choose sub-allocation for OPS/SUPP:\n–û–±–µ—Ä—ñ—Ç—å –ø—ñ–¥—Ä–æ–∑–ø–æ–¥—ñ–ª –¥–ª—è OPS/SUPP:",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        except:
            await query.message.reply_text(
                "Choose sub-allocation for OPS/SUPP:\n–û–±–µ—Ä—ñ—Ç—å –ø—ñ–¥—Ä–æ–∑–ø–æ–¥—ñ–ª –¥–ª—è OPS/SUPP:",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        return MFR_ALLOCATION

    # ---------------- OPS/–ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è ----------------
    if selection.startswith("OPS/"):
        allocation_choice = selection.split("/")[1]
        set_cell(ws, "F9", f"{allocation_choice}")
        try:
            await query.message.delete()
        except:
            pass
        await query.message.reply_text(
            "Enter your full name:\n–í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ —ñ–º'—è —Ç–∞ –ø—Ä—ñ–∑–≤–∏—â–µ:",
            reply_markup=InlineKeyboardMarkup(
                [[InlineKeyboardButton("‚ùå Cancel | –í—ñ–¥–º—ñ–Ω–∏—Ç–∏", callback_data="cancel")]]
            )
        )
        return MFR_USER

    # ---------------- MTT/MDD/NTS ----------------
    if selection.upper() in ["MTT", "MDD", "NTS"]:
        context.user_data['allocation'] = selection.upper()
        try:
            await query.message.delete()
        except:
            pass
        await query.message.reply_text(
            f"Enter team number for {selection.upper()}:\n–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –∫–æ–º–∞–Ω–¥–∏ –¥–ª—è {selection.upper()}:",
            reply_markup=InlineKeyboardMarkup(
                [[InlineKeyboardButton("‚ùå Cancel | –í—ñ–¥–º—ñ–Ω–∏—Ç–∏", callback_data="cancel")]]
            )
        )
        return MFR_TEAM_NUMBER

    # ---------------- MECH/ADMIN ----------------
    if selection.upper() in ["MECH", "ADMIN"]:
        set_cell(ws, "F8", selection.upper())
        try:
            await query.message.delete()
        except:
            pass
        await query.message.reply_text(
            "Enter your full name:\n–í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ —ñ–º'—è —Ç–∞ –ø—Ä—ñ–∑–≤–∏—â–µ:",
            reply_markup=InlineKeyboardMarkup(
                [[InlineKeyboardButton("‚ùå Cancel | –í—ñ–¥–º—ñ–Ω–∏—Ç–∏", callback_data="cancel")]]
            )
        )
        return MFR_USER






# ------------------------- Team Number -------------------------
async def team_number_input_mfr(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    if not text.isdigit():
        await update.message.reply_text("‚ùå Team number must be a number")
        return MFR_TEAM_NUMBER

    ws = context.user_data['ws']
    allocation = context.user_data.get('allocation')
    set_cell(ws, "F9", f"{allocation}-{text}")

    await update.message.reply_text(
        "Enter your full name:\n–í–≤–µ–¥—ñ—Ç—å —ñ–º'—è —Ç–∞ –ø—Ä—ñ–∑–≤–∏—â–µ:",
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚ùå Cancel | –í—ñ–¥–º—ñ–Ω–∏—Ç–∏", callback_data="cancel")]])
    )
    return MFR_USER

# ------------------------- User -------------------------
async def user_input_mfr(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    if not text:
        await update.message.reply_text("‚ùå You did not enter your name")
        return MFR_USER

    user_name_latin = unidecode(text)
    ws = context.user_data['ws']
    set_cell(ws, "I6", user_name_latin)
    set_cell(ws, "B22", user_name_latin)
    location = context.user_data.get('location')
    manager_fa = {
        "Shyroke": "F.A. Oleksandr Rudnov",
        "Mykolaiv": "F.A. Andriy Padalka",
        "Kyiv": "F.A. Oleksandr Rudnov",
        "Sumy/Romny": "F.A. Oleksandr Rudnov"
    }.get(location,"F.A. Unknown")
    set_cell(ws, "F22", manager_fa)
    set_cell(ws, "C22", datetime.now().strftime("%Y-%m-%d"))
    set_cell(ws, "F12", datetime.now().strftime("%Y-%m-%d"))

    await update.message.reply_text(
        "Please describe the mechanical issue in detail:\n–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–ø–∏—à—ñ—Ç—å –º–µ—Ö–∞–Ω—ñ—á–Ω—É –Ω–µ—Å–ø—Ä–∞–≤–Ω—ñ—Å—Ç—å –¥–µ—Ç–∞–ª—å–Ω–æ:",
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("Cancel / –í—ñ–¥–º—ñ–Ω–∏—Ç–∏", callback_data="cancel")]])
    )
    return MFR_DESCRIPTION

# ------------------------- Description -------------------------
def split_text(text, words_per_line=20):
    words = text.split()
    return [" ".join(words[i:i+words_per_line]) for i in range(0, len(words), words_per_line)]

async def description_input_mfr(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    if not text:
        await update.message.reply_text("‚ùå Describe the situation:\n‚ùå –û–ø–∏—à—ñ—Ç—å —Å–∏—Ç—É–∞—Ü—ñ—é")
        return MFR_DESCRIPTION

    text_en = await translate_to_en(text)
    ws = context.user_data['ws']

    lines = split_text(text_en, words_per_line=20)
    start_row = 16
    for i, line in enumerate(lines, start=start_row):
        if i > 21: break
        ws[f"B{i}"].value = line
        ws[f"B{i}"].alignment = Alignment(horizontal="left", vertical="bottom")

    auto_adjust(ws, ["F5","C6","C9","F9","I6","F22","C22"])

    plate = ws["F5"].value or "CAR"
    filename = f"MFR_{plate}_{datetime.now().strftime('%Y-%m-%d_%H-%M')}.xlsx"

    location = context.user_data.get("location")
    manager_ids = MANAGERS.get(location, [])
    user_id = update.effective_user.id
    user_name = ALLOWED_USERS.get(user_id,"Unknown")

    for manager_id in manager_ids:
        file_stream = BytesIO()
        ws.parent.save(file_stream)
        file_stream.seek(0)
        await context.bot.send_document(chat_id=manager_id, document=file_stream, filename=filename)
        await context.bot.send_message(
            chat_id=manager_id,
            text=f"üìÑ –ù–æ–≤–∏–π MFR –∑–≤—ñ—Ç –ø–æ –ª–æ–∫–∞—Ü—ñ—ó {location} –≤—ñ–¥ {user_name}"
        )

    context.user_data.clear()
    await update.message.reply_text(
        "‚úÖ –ó–≤—ñ—Ç –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ Fleet —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫—É, –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ –¥–æ –æ–±—Ä–∞–Ω–æ—ó –ª–æ–∫–∞—Ü—ñ—ó.\n–í–∞–º –∑–∞–ª–∏—à–∏–ª–æ—Å—å –ª–∏—à–µ –ø—ñ–¥–ø–∏—Å–∞—Ç–∏ –π–æ–≥–æ.\n\n‚úÖ The report has been sent to the Fleet of chosen location.\n You only need to sign it."
    )

    logo_bytes_start = get_logo_bytes()
    logo_file = InputFile(logo_bytes_start, filename="logo.png")
    keyboard = [[InlineKeyboardButton("Start | –ü–æ—á–∞—Ç–∏", callback_data="main_menu")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_photo(photo=logo_file, caption="Welcome to NPA Fleet bot üöó", reply_markup=reply_markup)

    return ConversationHandler.END





#=============================================================MFR END=============================================================














#===================================================================CONTACTS====================================================

@restricted
async def contacts_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    # –ï—Å–ª–∏ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥", –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    if query.data == "back":
        try:
            await query.message.delete()
        except:
            pass
        await main_menu(update, context)  # –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
        return

    text = (
        "üìå Locations / –õ–æ–∫–∞—Ü—ñ—ó:\n"
        "Select a location to see contacts:\n–û–±–µ—Ä—ñ—Ç—å –ª–æ–∫–∞—Ü—ñ—é –¥–ª—è –∫–æ–Ω—Ç–∞–∫—Ç—ñ–≤:"
    )

    keyboard = [
        [
            InlineKeyboardButton("Shyroke | –®–∏—Ä–æ–∫–µ", callback_data="contact_shyroke"),
            InlineKeyboardButton("Mykolaiv | –ú–∏–∫–æ–ª–∞—ó–≤", callback_data="contact_mykolaiv"),
        ],
        [InlineKeyboardButton("‚ùå Back | –ù–∞–∑–∞–¥", callback_data="back")]
    ]

    reply_markup = InlineKeyboardMarkup(keyboard)
    try:
        await query.message.delete()
    except:
        pass
    await query.message.reply_text(text=text, reply_markup=reply_markup)



#–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ª–æ–∫–∞—Ü–∏–∏
@restricted
async def contact_location_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data

    if data == "back":
        try: await query.message.delete()
        except: pass
        await main_menu(update, context)
        return

    if data == "contact_shyroke":
        text = (
            "üìå Shyroke | –®–∏—Ä–æ–∫–µ\n"
            "üë§ F.A. Oleksandr Rudnov | F.A. –û–ª–µ–∫—Å–∞–Ω–¥—Ä –†—É–¥–Ω–æ–≤\n"
            "üìû Phone: +380 431 019 082\n"
            "üåê Map: https://goo.gl/maps/example1"
        )
        keyboard = [
            [InlineKeyboardButton("Car Wash | –ú–∏–π–∫–∞", url="https://goo.gl/maps/carwash_shyroke")],
            [InlineKeyboardButton("Tire Service | –®–∏–Ω–æ–º–æ–Ω—Ç–∞–∂", url="https://goo.gl/maps/tire_shyroke")],
            [InlineKeyboardButton("‚ùå Back | –ù–∞–∑–∞–¥", callback_data="contacts")]
        ]
    elif data == "contact_mykolaiv":
        text = (
            "üìå Mykolaiv | –ú–∏–∫–æ–ª–∞—ó–≤\n"
            "üë§ F.A. Andriy Padalka | F.A. –ê–Ω–¥—Ä—ñ–π –ü–∞–¥–∞–ª–∫–∞\n"
            "üìû Phone: +380 431 019 083\n"
            "üåê Map: https://goo.gl/maps/example2"
        )
        keyboard = [
            [InlineKeyboardButton("Car Wash | –ú–∏–π–∫–∞", url="https://goo.gl/maps/carwash_mykolaiv")],
            [InlineKeyboardButton("Tire Service | –®–∏–Ω–æ–º–æ–Ω—Ç–∞–∂", url="https://goo.gl/maps/tire_mykolaiv")],
            [InlineKeyboardButton("‚ùå Back | –ù–∞–∑–∞–¥", callback_data="contacts")]
        ]

    reply_markup = InlineKeyboardMarkup(keyboard)
    try: await query.message.delete()
    except: pass
    await query.message.reply_text(text=text, reply_markup=reply_markup)


#–ö–æ–Ω—Ç–∞–∫—Ç—ã –ø–æ –ª–æ–∫–∞—Ü–∏—è–º
LOCATIONS = {
    "shyroke": {
        "manager": {
            "name": "Oleksandr Rudnov | –û–ª–µ–∫—Å–∞–Ω–¥—Ä –†—É–¥–Ω–æ–≤",
            "phone": "+380987938674",
            "email": "OleRud441@npaid.org"
        },
        "senior_officer": {
            "position": "Senior Fleet Officer",
            "name": "Roman Kucherevskyi",
            "phone": "+380661930132",
            "email": "RomKuc884@npaid.org"
        },
        "car_washes": [
            {"name": "Avtoynhulstroy", "phone": "+380 67 633 1025", "map": "https://www.google.com/maps?cid=3778105884522161440"},
            {"name": "Nova Liniya", "phone": "+380 97 577 2770", "map": "https://www.google.com/maps?cid=1167848751790635382"},
        ],
        "tire_services": [
            {"name": "Avtoynhulstroy", "phone": "+380 67 633 1025", "map": "https://www.google.com/maps?cid=3778105884522161440"},
            {"name": "Nova Liniya", "phone": "+380 97 577 2770", "map": "https://www.google.com/maps?cid=1167848751790635382"},
            {"name": "SHYROKE - Tyre service", "phone": "+380 98 455 8113", "map": "https://maps.app.goo.gl/otgcPE4GaHowdxEj8"},
        ],
    },
    "mykolaiv": {
        "manager": {
            "name": "Andriy Padalka | –ê–Ω–¥—Ä—ñ–π –ü–∞–¥–∞–ª–∫–∞",
            "phone": "+380506008345",
            "email": "AndPad212@npaid.org"
        },
        "senior_officer": {
            "position": "Senior Fleet Officer",
            "name": "Roman Kucherevskyi",
            "phone": "+380661930132",
            "email": "RomKuc884@npaid.org"
        },
        "car_washes": [
            {"name": "AVTOSMILE", "phone": "+380 95 792 35 94", "map": "https://maps.app.goo.gl/Xc2b4q8CWEHERMtL9"},
            {"name": "VIANOR", "phone": "+380 50 495 60 85", "map": "https://maps.app.goo.gl/HQw66xsakjPp245T6"},
            {"name": "FOP MARGOLIN", "phone": "+380 63 035 23 02", "map": "https://maps.app.goo.gl/xFFs9e6gsxMEAXccA"},
            {"name": "AVTORELAX", "phone": "No number, yet", "map": "https://maps.app.goo.gl/YqjpXX8FSgbz3PVV6"},
            {"name": "FOP Shevchenko", "phone": "+380 97 438 25 38", "map": "https://maps.app.goo.gl/3SU1snMcijN48ehq8"},
        ],
        "tire_services": [
            {"name": "Tire Service 1", "phone": "+380 432 111 001", "map": "https://goo.gl/maps/tire1_mykolaiv"},
            {"name": "Tire Service 2", "phone": "+380 432 111 002", "map": "https://goo.gl/maps/tire2_mykolaiv"},
        ],
    }
}

@restricted
async def contact_location_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data

    if data == "back":
        try: await query.message.delete()
        except: pass
        await contacts_callback(update, context)
        return

    loc_key = None
    action = None

    if data.startswith("contact_"):
        loc_key = data.split("_")[1]  # shyroke –∏–ª–∏ mykolaiv
        loc_data = LOCATIONS[loc_key]
        manager = loc_data["manager"]
        senior = loc_data["senior_officer"]

        text = (
            f"üìå {loc_key.capitalize()}\n\n"
            f"üë§ Fleet Assistant: {manager['name']}\n"
            f"üìû Phone: {manager['phone']}\n"
            f"‚úâÔ∏è Email: {manager['email']}\n\n"
            f"üëî {senior['position']}: {senior['name']}\n"
            f"üìû Phone: {senior['phone']}\n"
            f"‚úâÔ∏è Email: {senior['email']}\n\n"  
        )

        keyboard = [
            [InlineKeyboardButton("üßº Car Wash | –ú–∏–π–∫–∞", callback_data=f"{loc_key}_carwash")],
            [InlineKeyboardButton("üîß Tire Service | –®–∏–Ω–æ–º–æ–Ω—Ç–∞–∂", callback_data=f"{loc_key}_tire")],
            [InlineKeyboardButton("‚ùå Back | –ù–∞–∑–∞–¥", callback_data="contacts")]
        ]
    elif data.endswith("_carwash"):
        loc_key = data.split("_")[0]
        text = "üßº Car Washes | –ú–∏–π–∫–∏:\n\n"
        for wash in LOCATIONS[loc_key]["car_washes"]:
            text += f"{wash['name']}\nPhone: {wash['phone']}\nMap: {wash['map']}\n\n"
        keyboard = [[InlineKeyboardButton("‚ùå Back | –ù–∞–∑–∞–¥", callback_data=f"contact_{loc_key}")]]
    elif data.endswith("_tire"):
        loc_key = data.split("_")[0]
        text = "üîß Tire Services | –®–∏–Ω–æ–º–æ–Ω—Ç–∞–∂—ñ:\n\n"
        for tire in LOCATIONS[loc_key]["tire_services"]:
            text += f"{tire['name']}\nPhone: {tire['phone']}\nMap: {tire['map']}\n\n"
        keyboard = [[InlineKeyboardButton("‚ùå Back | –ù–∞–∑–∞–¥", callback_data=f"contact_{loc_key}")]]
    else:
        return

    reply_markup = InlineKeyboardMarkup(keyboard)
    try: await query.message.delete()
    except: pass
    await query.message.reply_text(text=text, reply_markup=reply_markup)

#===================================================================CONTACTS END===================================================











# =================== Main ===================
def main():
    app = Application.builder().token(TOKEN).build()


    # LDR Conversation
    ldr_conv = ConversationHandler(
    entry_points=[CallbackQueryHandler(ldr_request_type_callback, pattern="^(flat_tire|other_request)$")],
    states={
        SERIAL: [MessageHandler(filters.TEXT & ~filters.COMMAND, serial_input_ldr)],
        ODOMETER: [MessageHandler(filters.TEXT & ~filters.COMMAND, odometer_input_ldr)],   # <-- –Ω–æ–≤—ã–π —à–∞–≥
        ALLOCATION: [CallbackQueryHandler(allocation_input_ldr)],
        TEAM_NUMBER: [MessageHandler(filters.TEXT & ~filters.COMMAND, team_number_input_ldr)],
        USER: [MessageHandler(filters.TEXT & ~filters.COMMAND, user_input_ldr)],
        DESCRIPTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, description_input_ldr)],
        OTHER_REQUEST_INPUT: [MessageHandler(filters.TEXT & ~filters.COMMAND, ldr_other_request_input)],
        },
        fallbacks=[
            CommandHandler("cancel", cancel),
            CallbackQueryHandler(cancel, pattern="cancel")
        ],
        per_user=True,
        conversation_timeout=300  # <--- —Ç–∞–π–º–∞—É—Ç 5 –º–∏–Ω—É—Ç
    )



    



    # MFR Conversation
    mfr_conv = ConversationHandler(
    entry_points=[CallbackQueryHandler(mfr_callback, pattern="mfr")],
    states={
        MFR_ALLOCATION: [
            CallbackQueryHandler(mfr_location_selection, pattern="^(Shyroke|Mykolaiv|Kyiv|Sumy/Romny)$"),
            CallbackQueryHandler(allocation_input_mfr)
        ],
        MFR_MODEL_SELECTION: [
            CallbackQueryHandler(model_input_mfr, pattern="^(brand_.*|back_to_brands|.*)$")
        ],
        MFR_SERIAL: [MessageHandler(filters.TEXT & ~filters.COMMAND, serial_input_mfr)],
        MFR_ODOMETER: [MessageHandler(filters.TEXT & ~filters.COMMAND, odometer_input_mfr)],
        MFR_TEAM_NUMBER: [MessageHandler(filters.TEXT & ~filters.COMMAND, team_number_input_mfr)],
        MFR_USER: [MessageHandler(filters.TEXT & ~filters.COMMAND, user_input_mfr)],
        MFR_DESCRIPTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, description_input_mfr)],
    },
    fallbacks=[
        CommandHandler("cancel", cancel),
        CallbackQueryHandler(cancel, pattern="cancel")
    ],
    per_user=True,
    conversation_timeout=300
    )




    
    # Handlers
    app.add_handler(mfr_conv)
    # app.add_handler(other_questions_conv)
    app.add_handler(ldr_conv)
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(start_button_callback, pattern="main_menu"))
    app.add_handler(CallbackQueryHandler(ldr_callback, pattern="ldr"))
    app.add_handler(CallbackQueryHandler(mfr_callback, pattern="mfr"))
    app.add_handler(CallbackQueryHandler(contacts_callback, pattern="contacts"))
    

    

    # –ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    app.add_handler(CommandHandler("add_user", add_user))
    app.add_handler(CommandHandler("remove_user", remove_user))
    app.add_handler(CommandHandler("list_users", list_users))


    # Accident procedures (–î–¢–ü)
    app.add_handler(CallbackQueryHandler(accident_procedure_callback, pattern="^accident_procedure$"))
    app.add_handler(CallbackQueryHandler(accident_procedure_ua_callback, pattern="^accident_procedure_ua$"))
    app.add_handler(CallbackQueryHandler(accident_procedure_en_callback, pattern="^accident_procedure_en$"))

    app.add_handler(CallbackQueryHandler(cancel, pattern="cancel"))
    app.add_handler(CallbackQueryHandler(contacts_callback, pattern="^contacts$"))
    app.add_handler(CallbackQueryHandler(contact_location_callback, pattern="^contact_shyroke$|^contact_mykolaiv$|^shyroke_carwash$|^shyroke_tire$|^mykolaiv_carwash$|^mykolaiv_tire$|^back$"))


    app.run_polling()

if __name__ == "__main__":
    main()