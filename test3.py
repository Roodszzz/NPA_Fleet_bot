import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InputFile
from telegram.ext import (
    Application, CommandHandler, CallbackQueryHandler,
    MessageHandler, ConversationHandler, filters, ContextTypes
)
from openpyxl import load_workbook
from openpyxl.drawing.image import Image

from openpyxl.styles import Alignment
from io import BytesIO
from datetime import datetime
from googletrans import Translator
from unidecode import unidecode
import base64
import smtplib
import re
from email.message import EmailMessage
import os
import os
from dotenv import load_dotenv

load_dotenv()  # –ó–∞–≥—Ä—É–∂–∞–µ–º .env
TOKEN = os.getenv("TOKEN")


logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)

# ===== –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π Excel =====

def get_workbook():
    # –ë–µ—Ä–µ–º –ø—É—Ç—å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ç–µ–∫—É—â–µ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞
    current_dir = os.path.dirname(__file__)
    file_path = os.path.join(current_dir, "excel", "LDR.xlsx")  # –ø—É—Ç—å –∫ Excel —Ñ–∞–π–ª—É –≤ –ø–∞–ø–∫–µ excel –ø—Ä–æ–µ–∫—Ç–∞
    return load_workbook(file_path)


# def get_workbook():
#     file_path = "/home/noob/BOT/excel/excel.txt"  # –ø—É—Ç—å –∫ txt —Å base64
#     with open(file_path, "r") as f:
#         encoded_excel = f.read()
#     file_bytes = base64.b64decode(encoded_excel)
#     return load_workbook(filename=BytesIO(file_bytes))

# ===== –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –ª–æ–≥–æ—Ç–∏–ø =====

def get_logo_bytes():
    # –ë–µ—Ä–µ–º –ø—É—Ç—å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ç–µ–∫—É—â–µ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞
    current_dir = os.path.dirname(__file__)
    logo_path = os.path.join(current_dir, "logo", "Drive the NPA way.png")
    with open(logo_path, "rb") as f:
        return BytesIO(f.read())


# ===== –°–æ—Å—Ç–æ—è–Ω–∏—è =====
SERIAL, ALLOCATION, TEAM_NUMBER, USER, DESCRIPTION = range(5)
translator = Translator()
# –ú–µ–Ω–µ–¥–∂–µ—Ä—ã –ø–æ –ª–æ–∫–∞—Ü–∏–∏
managers = {
    "Shyroke": "manager_shyroke@example.com",
    "Mykolaiv": "manager_mykolaiv@example.com"
}


async def translate_to_en(text: str) -> str:
    result = await translator.translate(text, dest='en')
    return result.text

# ===== –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ =====
def set_cell(ws, cell, value):
    ws[cell] = value
    ws[cell].alignment = Alignment(horizontal="center", vertical="center")

def auto_adjust(ws, cells):
    for cell in cells:
        value = ws[cell].value
        if value:
            col_letter = ''.join(filter(str.isalpha, cell))
            ws.column_dimensions[col_letter].width = max(
                ws.column_dimensions[col_letter].width or 10,
                len(str(value)) + 2
            )
            ws.row_dimensions[ws[cell].row].height = max(
                ws.row_dimensions[ws[cell].row].height or 15,
                15
            )



async def send_excel_to_manager(location, file_stream):
    email_to = managers.get(location)
    if not email_to:
        logging.warning(f"No manager found for location: {location}")
        return

    # –ó–∞–≥–ª—É—à–∫–∞ ‚Äî –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º, —á—Ç–æ —Ñ–∞–π–ª "–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω"
    logging.info(f"[TEST MODE] Excel would be sent to {email_to} for location {location}")
    print(f"[TEST MODE] Excel would be sent to {email_to} for location {location}")
            


# async def send_excel_to_manager(location, file_stream):
#     if location == "Shyroke":
#         email_to = "OleRud441@npaid.org"
#         msg = EmailMessage()
#         msg['Subject'] = f"NPA Vehicle Report - {location}"
#         msg['From'] = email_to
#         msg['To'] = email_to
#         msg.set_content(f"Please find attached the latest vehicle report for {location}.")

#         file_stream.seek(0)
#         msg.add_attachment(
#             file_stream.read(),
#             maintype='application',
#             subtype='vnd.openxmlformats-officedocument.spreadsheetml.sheet',
#             filename="report.xlsx"
#         )

#         # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ SMTP –¥–ª—è Outlook
#         with smtplib.SMTP("smtp.office365.com", 587) as server:
#             server.starttls()
#             server.login(email_to, "Shyroke-441")  # –ø–∞—Ä–æ–ª—å
#             server.send_message(msg)

#         logging.info(f"Excel sent to {email_to} for {location}")
#     else:
#         # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –¥—Ä—É–≥–∏—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
#         logging.info(f"[TEST MODE] Excel would be sent to manager for {location}")
#         print(f"[TEST MODE] Excel would be sent to manager for {location}")





# ===== –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é =====
async def main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard_inline = [
        [InlineKeyboardButton("LDR / –õ–î–†", callback_data="ldr")],
        [InlineKeyboardButton("MFR / –ú–§–†", callback_data="mfr")],
        [InlineKeyboardButton("VAR / –í–ê–†", callback_data="var")],
        [InlineKeyboardButton("Contacts / –ö–æ–Ω—Ç–∞–∫—Ç–∏", callback_data="contacts")],
        [InlineKeyboardButton("Other questions / –Ü–Ω—à—ñ –ø–∏—Ç–∞–Ω–Ω—è", callback_data="other_questions")]
    ]
    reply_markup_inline = InlineKeyboardMarkup(keyboard_inline)
    text = ("Hello! This is the NPA Fleet bot üöó\nI can help you create reports for vehicles.\n"
            "–ü—Ä–∏–≤—ñ—Ç! –¶–µ –±–æ—Ç NPA Fleet üöó\n–Ø –¥–æ–ø–æ–º–æ–∂—É –≤–∞–º —Å—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ –∑–≤—ñ—Ç–∏ –ø–æ –∞–≤—Ç–æ–º–æ–±—ñ–ª—è—Ö.\n"
            "What are you interested in today? / –©–æ –≤–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—å —Å—å–æ–≥–æ–¥–Ω—ñ?")

    if update.callback_query:
        await update.callback_query.answer()
        try:
            await update.callback_query.message.delete()
        except:
            pass
        await update.callback_query.message.reply_text(text=text, reply_markup=reply_markup_inline)
    elif update.message:
        await update.message.reply_text(text=text, reply_markup=reply_markup_inline)

# ===== Start =====
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.clear()
    logo_bytes = get_logo_bytes()
    logo_file = InputFile(logo_bytes, filename="logo.png")
    keyboard = [[InlineKeyboardButton("Start / –ü–æ—á–∞—Ç–∏", callback_data="main_menu")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    if update.message:
        await update.message.reply_photo(photo=logo_file, caption="Welcome to NPA Fleet bot üöó\n–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –≤ NPA Fleet –±–æ—Ç", reply_markup=reply_markup)
    elif update.callback_query:
        await update.callback_query.answer()
        await update.callback_query.message.reply_photo(photo=logo_file, caption="Welcome to NPA Fleet bot üöó\n–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –≤ NPA Fleet –±–æ—Ç", reply_markup=reply_markup)

async def start_button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await main_menu(update, context)

# ===== Cancel =====


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    context.user_data.clear()

    if update.callback_query:
        # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback_query, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏"
        await update.callback_query.answer()
        # –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            await update.callback_query.message.delete()
        except:
            pass

    # –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await main_menu(update, context)

    return ConversationHandler.END



# ===== LDR =====
async def ldr_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    keyboard = [
        [InlineKeyboardButton("Flat tire / –ü–æ—à–∫–æ–¥–∂–µ–Ω–µ –∫–æ–ª–µ—Å–æ", callback_data="flat_tire")],
        [InlineKeyboardButton("Wipers replacement / –ó–∞–º—ñ–Ω–∞ –¥–≤–æ—Ä–Ω–∏–∫—ñ–≤", callback_data="wipers")],
        [InlineKeyboardButton("Other request / –Ü–Ω—à–µ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è", callback_data="other_request")],
        [InlineKeyboardButton("Cancel / –í—ñ–¥–º—ñ–Ω–∏—Ç–∏", callback_data="cancel")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    try: await query.message.delete()
    except: pass
    await query.message.reply_text("Choose request type / –í–∏–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è:", reply_markup=reply_markup)

async def ldr_request_type_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data
    if data == "cancel":
        return await cancel(update, context)
    if data == "other_request":
        keyboard = [[InlineKeyboardButton("Cancel / –í—ñ–¥–º—ñ–Ω–∏—Ç–∏", callback_data="cancel")]]
        try: await query.message.delete()
        except: pass
        await query.message.reply_text("You chose: Other request / –í–∏ –æ–±—Ä–∞–ª–∏: –Ü–Ω—à–µ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è. Function in progress / –§—É–Ω–∫—Ü—ñ—è —â–µ –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ", reply_markup=InlineKeyboardMarkup(keyboard))
        return ConversationHandler.END

    context.user_data['wb'] = get_workbook()
    context.user_data['ws'] = context.user_data['wb'].active
    ws = context.user_data['ws']
    if data == "flat_tire":
        set_cell(ws, "B4", "Flat tyre / –ü–æ—à–∫–æ–¥–∂–µ–Ω–µ –∫–æ–ª–µ—Å–æ")
    elif data == "wipers":
        set_cell(ws, "B4", "Wipers replacement / –ó–∞–º—ñ–Ω–∞ –¥–≤–æ—Ä–Ω–∏–∫—ñ–≤")
    set_cell(ws, "D4", "Serial / ID / –°–µ—Ä—ñ–π–Ω–∏–π –Ω–æ–º–µ—Ä / ID")

    keyboard = [
        [InlineKeyboardButton("Shyroke", callback_data="Shyroke")],
        [InlineKeyboardButton("Mykolaiv", callback_data="Mykolaiv")],
        [InlineKeyboardButton("Cancel / –í—ñ–¥–º—ñ–Ω–∏—Ç–∏", callback_data="cancel")]
    ]
    try: await query.message.delete()
    except: pass
    await query.message.reply_text("Select vehicle location / –û–±–µ—Ä—ñ—Ç—å –ª–æ–∫–∞—Ü—ñ—é –∞–≤—Ç–æ–º–æ–±—ñ–ª—è:", reply_markup=InlineKeyboardMarkup(keyboard))
    return ALLOCATION

# ===== –í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö =====



async def serial_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip().upper()  # –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ –≤–µ—Ä—Ö–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä
    text = text.replace(" ", "")  # —É–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª –±–µ–∑ –¥–µ—Ñ–∏—Å–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä AA12, –¥–æ–±–∞–≤–∏–º –¥–µ—Ñ–∏—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
    if re.fullmatch(r"[A-Z]{2}\d{2}", text):
        text = text[:2] + "-" + text[2:]

    # –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞: –¥–≤–µ –±—É–∫–≤—ã - –¥–µ—Ñ–∏—Å - –¥–≤–µ —Ü–∏—Ñ—Ä—ã
    if not re.fullmatch(r"[A-Z]{2}-\d{2}", text):
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ –∞–≤—Ç–æ. –§–æ—Ä–º–∞—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å: AA-12\nTry again / –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:"
        )
        return SERIAL

    ws = context.user_data['ws']
    set_cell(ws, "D4", text)  # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä

    keyboard = [
        [InlineKeyboardButton("LOGS", callback_data="LOGS")],
        [InlineKeyboardButton("MTT", callback_data="MTT")],
        [InlineKeyboardButton("MDD", callback_data="MDD")],
        [InlineKeyboardButton("TFM", callback_data="TFM")],
        [InlineKeyboardButton("QA", callback_data="QA")],
        [InlineKeyboardButton("NTS", callback_data="NTS")],
        [InlineKeyboardButton("Cancel / –í—ñ–¥–º—ñ–Ω–∏—Ç–∏", callback_data="cancel")]
    ]
    await update.message.reply_text(
        "Choose Allocation / –û–±–µ—Ä—ñ—Ç—å Allocation:", 
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return ALLOCATION

# async def serial_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
#     text = update.message.text.strip().upper()  # –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ –≤–µ—Ä—Ö–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä
#     text = text.replace(" ", "")  # —É–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã

#     # –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞: –¥–≤–µ –±—É–∫–≤—ã - –¥–µ—Ñ–∏—Å - –¥–≤–µ —Ü–∏—Ñ—Ä—ã
#     if not re.fullmatch(r"[A-Z]{2}-\d{2}", text):
#         await update.message.reply_text(
#             "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ –∞–≤—Ç–æ. –§–æ—Ä–º–∞—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å: AA-12\nTry again / –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:"
#         )
#         return SERIAL

#     ws = context.user_data['ws']
#     set_cell(ws, "D4", text)  # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä

#     keyboard = [
#         [InlineKeyboardButton("LOGS", callback_data="LOGS")],
#         [InlineKeyboardButton("MTT", callback_data="MTT")],
#         [InlineKeyboardButton("MDD", callback_data="MDD")],
#         [InlineKeyboardButton("TFM", callback_data="TFM")],
#         [InlineKeyboardButton("QA", callback_data="QA")],
#         [InlineKeyboardButton("NTS", callback_data="NTS")],
#         [InlineKeyboardButton("Cancel / –í—ñ–¥–º—ñ–Ω–∏—Ç–∏", callback_data="cancel")]
#     ]
#     await update.message.reply_text(
#         "Choose Allocation / –û–±–µ—Ä—ñ—Ç—å Allocation:", 
#         reply_markup=InlineKeyboardMarkup(keyboard)
#     )
#     return ALLOCATION



# async def serial_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
#     text = update.message.text.strip()
#     if not text:
#         await update.message.reply_text("‚ùå You did not enter a vehicle number / ‚ùå –í–∏ –Ω–µ –≤–≤–µ–ª–∏ –Ω–æ–º–µ—Ä –∞–≤—Ç–æ. Try again / –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:")
#         return SERIAL
#     ws = context.user_data['ws']
#     set_cell(ws, "D4", text)

#     keyboard = [
#         [InlineKeyboardButton("LOGS", callback_data="LOGS")],
#         [InlineKeyboardButton("MTT", callback_data="MTT")],
#         [InlineKeyboardButton("MDD", callback_data="MDD")],
#         [InlineKeyboardButton("TFM", callback_data="TFM")],
#         [InlineKeyboardButton("QA", callback_data="QA")],
#         [InlineKeyboardButton("NTS", callback_data="NTS")],
#         [InlineKeyboardButton("Cancel / –í—ñ–¥–º—ñ–Ω–∏—Ç–∏", callback_data="cancel")]
#     ]
#     await update.message.reply_text("Choose Allocation / –û–±–µ—Ä—ñ—Ç—å Allocation:", reply_markup=InlineKeyboardMarkup(keyboard))
#     return ALLOCATION




    

async def allocation_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    selection = query.data
    if selection == "cancel":
        return await cancel(update, context)
    ws = context.user_data['ws']

    if selection in ["Shyroke", "Mykolaiv"]:
        context.user_data['location'] = selection
        set_cell(ws, "B6", selection)
        try: await query.message.delete()
        except: pass
        await query.message.reply_text("Enter vehicle number or call sign (e.g. HP-12) / –í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –∞–≤—Ç–æ –∞–±–æ call sign (–Ω–∞–ø—Ä. HP-12):", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("Cancel / –í—ñ–¥–º—ñ–Ω–∏—Ç–∏", callback_data="cancel")]]))
        return SERIAL

    if selection.upper() in ["NTS", "MTT", "MDD"]:
        context.user_data['allocation'] = selection.upper()
        try: await query.message.delete()
        except: pass
        await query.message.reply_text(f"Enter team number for {selection.upper()} / –í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –∫–æ–º–∞–Ω–¥–∏ –¥–ª—è {selection.upper()}:", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("Cancel / –í—ñ–¥–º—ñ–Ω–∏—Ç–∏", callback_data="cancel")]]))
        return TEAM_NUMBER

    set_cell(ws, "D6", selection)
    try: await query.message.delete()
    except: pass
    await query.message.reply_text("Enter your full name / –í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ –ü–Ü–ë:", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("Cancel / –í—ñ–¥–º—ñ–Ω–∏—Ç–∏", callback_data="cancel")]]))
    return USER

async def team_number_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    if not text.isdigit():
        await update.message.reply_text("‚ùå Team number must be a number / ‚ùå –ù–æ–º–µ—Ä –∫–æ–º–∞–Ω–¥–∏ –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ —á–∏—Å–ª–æ–º. Try again / –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:")
        return TEAM_NUMBER
    ws = context.user_data['ws']
    allocation = context.user_data['allocation']
    set_cell(ws, "D6", f"{allocation}-{text}")
    await update.message.reply_text("Enter your full name / –í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ –ü–Ü–ë:", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("Cancel / –í—ñ–¥–º—ñ–Ω–∏—Ç–∏", callback_data="cancel")]]))
    return USER

async def user_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    if not text:
        await update.message.reply_text("‚ùå You did not enter your name / ‚ùå –í–∏ –Ω–µ –≤–≤–µ–ª–∏ –ü–Ü–ë. Try again / –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:")
        return USER
    user_name_latin = unidecode(text)
    ws = context.user_data['ws']
    set_cell(ws, "F4", user_name_latin)
    set_cell(ws, "A10", user_name_latin)
    set_cell(ws, "D10", "F.A. Oleksandr Rudnov")
    today_str = datetime.now().strftime("%Y-%m-%d")
    set_cell(ws, "B10", today_str)
    await update.message.reply_text("Briefly describe the situation / –ö–æ—Ä–æ—Ç–∫–æ –æ–ø–∏—à—ñ—Ç—å —Å–∏—Ç—É–∞—Ü—ñ—é:", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("Cancel / –í—ñ–¥–º—ñ–Ω–∏—Ç–∏", callback_data="cancel")]]))
    return DESCRIPTION





from openpyxl.drawing.image import Image  # <- —É–±–µ–¥–∏—Å—å, —á—Ç–æ –∏–º–ø–æ—Ä—Ç –µ—Å—Ç—å

from openpyxl.drawing.image import Image  # —É–±–µ–¥–∏—Å—å, —á—Ç–æ –∏–º–ø–æ—Ä—Ç –µ—Å—Ç—å

async def description_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    if not text:
        await update.message.reply_text(
            "‚ùå Describe the situation / ‚ùå –û–ø–∏—à—ñ—Ç—å —Å–∏—Ç—É–∞—Ü—ñ—é. Try again / –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:"
        )
        return DESCRIPTION

    # –ü–µ—Ä–µ–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
    text_en = await translate_to_en(text)

    ws = context.user_data['ws']
    set_cell(ws, "A9", text_en)
    auto_adjust(ws, ["B4","D4","B6","D6","F4","A10","A9","B10"])

    # ==== –í—Å—Ç–∞–≤–ª—è–µ–º –ª–æ–≥–æ—Ç–∏–ø –≤ Excel ====
    logo_path = os.path.join(os.path.dirname(__file__), "logo", "–õ–æ–≥–æ –µ–∫—Å–µ–ª—å.png")
    img = Image(logo_path)
    img.width = 396  # —à–∏—Ä–∏–Ω–∞ –≤ –ø–∏–∫—Å–µ–ª—è—Ö
    img.height = 72  # –≤—ã—Å–æ—Ç–∞ –≤ –ø–∏–∫—Å–µ–ª—è—Ö
    ws.add_image(img, "A1")  # –≤—Å—Ç–∞–≤–ª—è–µ–º –≤ —è—á–µ–π–∫—É A1

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º workbook –≤ –ø–æ—Ç–æ–∫ –ø–∞–º—è—Ç–∏
    file_stream = BytesIO()
    ws.parent.save(file_stream)
    file_stream.seek(0)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    # await update.message.reply_document(document=file_stream, filename="result.xlsx")
    await update.message.reply_text("‚úÖ File sent / ‚úÖ –§–∞–π–ª –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ")

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º –ø–æ –ª–æ–∫–∞—Ü–∏–∏
    location = context.user_data.get('location')
    if location:
        ADMIN_ID = int(os.getenv("ADMIN_ID"))
        tg_users = {
            "Shyroke": [ADMIN_ID],
            "Mykolaiv": [] # –∑–∞–≥–ª—É—à–∫–∞
        }  
        
        for user_id in tg_users.get(location, []):
            file_stream.seek(0)
            await context.bot.send_document(chat_id=user_id, document=file_stream, filename="result.xlsx")
        
        if location != "Shyroke":
            logging.info(f"[TEST MODE] Excel would be sent to manager for {location}")

    # –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    context.user_data.clear()

    # –°—Ç–∞—Ä—Ç–æ–≤–æ–µ –æ–∫–Ω–æ —Å –ª–æ–≥–æ—Ç–∏–ø–æ–º –¥–ª—è Telegram
    logo_bytes_start = get_logo_bytes()
    logo_file = InputFile(logo_bytes_start, filename="logo.png")
    keyboard = [[InlineKeyboardButton("Start / –ü–æ—á–∞—Ç–∏", callback_data="main_menu")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_photo(
        photo=logo_file,
        caption="Welcome to NPA Fleet bot üöó\n–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –≤ NPA Fleet –±–æ—Ç",
        reply_markup=reply_markup
    )

    return ConversationHandler.END






# ===== –ó–∞–≥–ª—É—à–∫–∏ =====
async def generic_stub(update: Update, context: ContextTypes.DEFAULT_TYPE, name="Function"):
    query = update.callback_query
    await query.answer()
    keyboard = [[InlineKeyboardButton("Cancel / –í—ñ–¥–º—ñ–Ω–∏—Ç–∏", callback_data="cancel")]]
    try: await query.message.delete()
    except: pass
    await query.message.reply_text(f"You selected / –í–∏ –æ–±—Ä–∞–ª–∏ {name}. Function in progress / –§—É–Ω–∫—Ü—ñ—è —â–µ –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ", reply_markup=InlineKeyboardMarkup(keyboard))

async def mfr_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    return await generic_stub(update, context, "MFR / –ú–§–†")
async def var_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    return await generic_stub(update, context, "VAR / –í–ê–†")
async def contacts_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    return await generic_stub(update, context, "Contacts / –ö–æ–Ω—Ç–∞–∫—Ç–∏")
async def other_questions_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    return await generic_stub(update, context, "Other questions / –Ü–Ω—à—ñ –ø–∏—Ç–∞–Ω–Ω—è")

# ===== –ó–∞–ø—É—Å–∫ =====
def main():
    app = Application.builder().token(TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(ldr_request_type_callback, pattern="^(flat_tire|wipers|other_request|Shyroke|Mykolaiv)$")],
        states={
            SERIAL: [MessageHandler(filters.TEXT & ~filters.COMMAND, serial_input)],
            ALLOCATION: [CallbackQueryHandler(allocation_input, pattern="^(?!cancel$).*$")],
            TEAM_NUMBER: [MessageHandler(filters.TEXT & ~filters.COMMAND, team_number_input)],
            USER: [MessageHandler(filters.TEXT & ~filters.COMMAND, user_input)],
            DESCRIPTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, description_input)],
        },
        fallbacks=[CommandHandler("cancel", cancel), CallbackQueryHandler(cancel, pattern="cancel")],
        per_user=True,
        conversation_timeout=900
    )

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(start_button_callback, pattern="main_menu"))
    app.add_handler(CallbackQueryHandler(ldr_callback, pattern="ldr"))
    app.add_handler(conv_handler)
    app.add_handler(CallbackQueryHandler(mfr_callback, pattern="mfr"))
    app.add_handler(CallbackQueryHandler(var_callback, pattern="var"))
    app.add_handler(CallbackQueryHandler(contacts_callback, pattern="contacts"))
    app.add_handler(CallbackQueryHandler(other_questions_callback, pattern="other_questions"))
    app.add_handler(CallbackQueryHandler(cancel, pattern="cancel"))

    app.run_polling()

if __name__ == "__main__":
    main()
